<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.Input.Toolkit</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Controls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Automation_OperationCannotBePerformed">
            <summary>
              Looks up a localized string similar to Cannot perform operation..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.DomainUpDown_CurrentIndex_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid index value &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.DomainUpDown_InvalidInputAction_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid InvalidInputAction value &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Expander_OnExpandDirectionPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid ExpandDirection value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.InvalidAttemptToChangeReadOnlyProperty">
            <summary>
              Looks up a localized string similar to Invalid attempt to change read-only property &quot;{0}.&quot;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ListTimePickerPopup_TimeItemsSelection_ReadOnly">
            <summary>
              Looks up a localized string similar to Cannot set read-only property TimeItemsSelection..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.NumericUpDown_EnsureValidDoubleValue_InvalidDoubleValue">
            <summary>
              Looks up a localized string similar to Invalid double value &apos;{0}&apos;: valid value is of double type and within decimal range..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.NumericUpDown_EnsureValidIncrementValue_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid Increment value &apos;{0}&apos;: valid value is of double type, within decimal range, and positive.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.NumericUpDown_OnDecimalPlacesPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid DecimalPlaces value &apos;{0}&apos;: valid value is of int type and within 0 and 15 inclusive..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ObservableObjectCollection_ReadOnly">
            <summary>
              Looks up a localized string similar to The collection is currently ReadOnly and should not be modified..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Picker_OnMaxDropDownHeightPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid maximum drop down height value &apos;{0}&apos;. The value must be greater than or equal to zero..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Picker_PopupButtonModeNotValid">
            <summary>
              Looks up a localized string similar to Invalid PopupButtonMode value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Rating_SetItemCount_ItemCountMustBeLargerThanOrEqualToZero">
            <summary>
              Looks up a localized string similar to Value must be larger than or equal to 0..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.RatingAutomationPeer_GetLocalizedControlTypeCore">
            <summary>
              Looks up a localized string similar to Rating.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.RatingAutomationPeer_SetValue">
            <summary>
              Looks up a localized string similar to Value must be null or a number between 0 and 1..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.RatingItemAutomationPeer_GetLocalizedControlTypeCore">
            <summary>
              Looks up a localized string similar to Star.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Spinner_SpinNotValid">
            <summary>
              Looks up a localized string similar to Spin action is not valid at this moment..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimeInput_PopupMinutesInterval_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid PopupMinutesInterval &apos;{0}&apos;. The interval can be set to 0 (no interval) to and including 59..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimeInput_PopupSecondsInterval_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid PopupSecondsInterval &apos;{0}&apos;.The interval can be set to 0 (no interval) to and including 59..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimePicker_PopupSetInStyle">
            <summary>
              Looks up a localized string similar to Cannot set the PopupProperty in a style. Please use PopupTemplate..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimePicker_PopupTimeSelectionModeNotValid">
            <summary>
              Looks up a localized string similar to Invalid PopupTimeSelectionMode for this popup, value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimeUpDown_OnTimeHintContentChanged">
            <summary>
              Looks up a localized string similar to Cannot set read-only property TimeHintContent..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TypeConverters_Convert_CannotConvert">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is unable to convert &apos;{1}&apos; to &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TypeConverters_ConvertFrom_CannotConvertFromType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot convert from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.UpDown_ParseException">
            <summary>
              Looks up a localized string similar to Cannot parse text &apos;{0}&apos;.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Extensions">
            <summary>
            This set of internal extension methods provide general solutions and 
            utilities in a small enough number to not warrant a dedicated extension
            methods class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Extensions.Invert(System.Windows.Media.Matrix,System.Windows.Media.Matrix@)">
            <summary>
            Inverts a Matrix. The Invert functionality on the Matrix type is 
            internal to the framework only. Since Matrix is a struct, an out 
            parameter must be presented.
            </summary>
            <param name="m">The Matrix object.</param>
            <param name="outputMatrix">The matrix to return by an output 
            parameter.</param>
            <returns>Returns a value indicating whether the type was 
            successfully inverted. If the determinant is 0.0, then it cannot 
            be inverted and the original instance will remain untouched.</returns>
        </member>
        <member name="M:System.Windows.Controls.Extensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            An implementation of the Contains member of string that takes in a 
            string comparison. The traditional .NET string Contains member uses 
            StringComparison.Ordinal.
            </summary>
            <param name="s">The string.</param>
            <param name="value">The string value to search for.</param>
            <param name="comparison">The string comparison type.</param>
            <returns>Returns true when the substring is found.</returns>
        </member>
        <member name="T:System.Windows.Controls.BindingSourceEvaluator`1">
            <summary>
            A framework element that permits a binding to be evaluated in a new data
            context leaf node. Uses the BindingSource to do the evaluation.
            </summary>
            <typeparam name="T">The type of dynamic binding to return.</typeparam>
            <remarks>Mimicks the class BindingEvaluator that uses DataContext
            to do evaluation.</remarks>
        </member>
        <member name="F:System.Windows.Controls.BindingSourceEvaluator`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BindingSourceEvaluator`1.#ctor(System.Windows.Data.Binding)">
            <summary>
            Initializes a new instance of the BindingSourceEvaluator class.
            </summary>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:System.Windows.Controls.BindingSourceEvaluator`1.GetDynamicValue(System.Object)">
            <summary>
            Evaluates the specified source.
            </summary>
            <param name="source">The object used as a source for the
            evaluation.</param>
            <returns>The evaluated binding.</returns>
            <remarks>Only uses Path, Converter, ConverterCulture and
            ConverterParameter.</remarks>
        </member>
        <member name="P:System.Windows.Controls.BindingSourceEvaluator`1.Value">
            <summary>
            Gets the data item string value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BindingSourceEvaluator`1.ValueBinding">
            <summary>
            Gets the value binding that is used as a template
            for the actual evaluation.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.InteractionHelper">
            <summary>
            The InteractionHelper provides controls with support for all of the
            common interactions like mouse movement, mouse clicks, key presses,
            etc., and also incorporates proper event semantics when the control is
            disabled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInMilliseconds">
            <summary>
            The threshold used to determine whether two clicks are temporally
            local and considered a double click (or triple, quadruple, etc.).
            500 milliseconds is the default double click value on Windows.
            This value would ideally be pulled form the system settings.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInPixelsSquared">
            <summary>
            The threshold used to determine whether two clicks are spatially
            local and considered a double click (or triple, quadruple, etc.)
            in pixels squared.  We use pixels squared so that we can compare to
            the distance delta without taking a square root.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper._updateVisualState">
            <summary>
            Reference used to call UpdateVisualState on the base class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the InteractionHelper class.
            </summary>
            <param name="control">Control receiving interaction.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
            <remarks>
            UpdateVisualState works differently than the rest of the injected
            functionality.  Most of the other events are overridden by the
            calling class which calls Allow, does what it wants, and then calls
            Base.  UpdateVisualState is the opposite because a number of the
            methods in InteractionHelper need to trigger it in the calling
            class.  We do this using the IUpdateVisualState internal interface.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualStateBase(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the control's Loaded event.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the control's IsEnabled property.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnIsReadOnlyChanged(System.Boolean)">
            <summary>
            Handles changes to the control's IsReadOnly property.
            </summary>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnApplyTemplateBase">
            <summary>
            Update the visual state of the control when its template is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's GotFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnGotFocusBase">
            <summary>
            Base implementation of the virtual GotFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's LostFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLostFocusBase">
            <summary>
            Base implementation of the virtual LostFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseEnter event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseEnterBase">
            <summary>
            Base implementation of the virtual MouseEnter event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseLeave event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeaveBase">
            <summary>
            Base implementation of the virtual MouseLeave event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonDownBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonDown event
            handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonUpBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonUp event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.GetLogicalKey(System.Windows.FlowDirection,System.Windows.Input.Key)">
            <summary>
            Translates keys for proper RightToLeft mode support.
            </summary>
            <param name="flowDirection">Control's flow direction mode.</param>
            <param name="originalKey">Original key.</param>
            <returns>
            A translated key code, indicating how the original key should be interpreted.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.Control">
            <summary>
            Gets the control the InteractionHelper is targeting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsFocused">
            <summary>
            Gets a value indicating whether the control has focus.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary> 
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsReadOnly">
            <summary>
            Gets a value indicating whether the read-only property is set.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsPressed">
            <summary>
            Gets a value indicating whether the mouse button is pressed down
            over the control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickTime">
            <summary>
            Gets or sets the last time the control was clicked.
            </summary>
            <remarks>
            The value is stored as Utc time because it is slightly more
            performant than converting to local time.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickPosition">
            <summary>
            Gets or sets the mouse position of the last click.
            </summary>
            <remarks>The value is relative to the control.</remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.ClickCount">
            <summary>
            Gets the number of times the control was clicked.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ItemsControlHelper">
            <summary>
            The ItemContainerGenerator provides useful utilities for ItemsControls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.ItemsControlHelper._itemsHost">
            <summary>
            A Panel that is used as the ItemsHost of the ItemsControl.  This
            property will only be valid when the ItemsControl is live in the
            tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ItemsControlHelper._scrollHost">
            <summary>
            A ScrollViewer that is used to scroll the items in the ItemsHost.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.#ctor(System.Windows.Controls.ItemsControl)">
            <summary>
            Initializes a new instance of the ItemContainerGenerator.
            </summary>
            <param name="control">
            The ItemsControl being tracked by the ItemContainerGenerator.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.OnApplyTemplate">
            <summary>
            Apply a control template to the ItemsControl.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>
            Prepares the specified container to display the specified item.
            </summary>
            <param name="element">
            Container element used to display the specified item.
            </param>
            <param name="parentItemContainerStyle">
            The ItemContainerStyle for the parent ItemsControl.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.UpdateItemContainerStyle(System.Windows.Style)">
            <summary>
            Update the style of any generated items when the ItemContainerStyle
            has been changed.
            </summary>
            <param name="itemContainerStyle">The ItemContainerStyle.</param>
            <remarks>
            Silverlight does not support setting a Style multiple times, so we
            only attempt to set styles on elements whose style hasn't already
            been set.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.ScrollIntoView(System.Windows.FrameworkElement)">
            <summary>
            Scroll the desired element into the ScrollHost's viewport.
            </summary>
            <param name="element">Element to scroll into view.</param>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlHelper.ItemsControl">
            <summary>
            Gets or sets the ItemsControl being tracked by the
            ItemContainerGenerator.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlHelper.ItemsHost">
            <summary>
            Gets a Panel that is used as the ItemsHost of the ItemsControl.
            This property will only be valid when the ItemsControl is live in
            the tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlHelper.ScrollHost">
            <summary>
            Gets a ScrollViewer that is used to scroll the items in the
            ItemsHost.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.IUpdateVisualState">
            <summary>
            The IUpdateVisualState interface is used to provide the
            InteractionHelper with access to the type's UpdateVisualState method.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.IUpdateVisualState.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="T:System.Windows.Controls.TypeConverters">
            <summary>
            Common TypeConverter functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.CanConvertFrom``1(System.Type)">
            <summary>
            Returns a value indicating whether this converter can convert an
            object of the given type to an instance of the expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="sourceType">
            The type of the source that is being evaluated for conversion.
            </param>
            <returns>
            A value indicating whether the converter can convert the provided
            type.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.ConvertFrom``1(System.ComponentModel.TypeConverter,System.Object)">
            <summary>
            Attempts to convert a specified object to an instance of the
            expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <returns>
            The instance of the expected type created from the converted object.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.CanConvertTo``1(System.Type)">
            <summary>
            Determines whether conversion is possible to a specified type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="destinationType">
            Identifies the data type to evaluate for conversion.
            </param>
            <returns>
            A value indicating whether conversion is possible.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.ConvertTo(System.ComponentModel.TypeConverter,System.Object,System.Type)">
            <summary>
            Attempts to convert a specified object to an instance of the
            desired type.
            </summary>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.VisualStates">
            <summary>
            Names and helpers for visual states in the controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCommon">
            <summary>
            Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNormal">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateReadOnly">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateMouseOver">
            <summary>
            MouseOver state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePressed">
            <summary>
            Pressed state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisabled">
            <summary>
            Disabled state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupFocus">
            <summary>
            Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnfocused">
            <summary>
            Unfocused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateFocused">
            <summary>
            Focused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupSelection">
            <summary>
            Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelected">
            <summary>
            Selected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnselected">
            <summary>
            Unselected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelectedInactive">
            <summary>
            Selected inactive state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpansion">
            <summary>
            Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpanded">
            <summary>
            Expanded state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCollapsed">
            <summary>
            Collapsed state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupPopup">
            <summary>
            Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupOpened">
            <summary>
            Opened state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupClosed">
            <summary>
            Closed state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupValidation">
            <summary>
            ValidationStates state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateValid">
            <summary>
            The valid state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalidFocused">
            <summary>
            Invalid, focused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalidUnfocused">
            <summary>
            Invalid, unfocused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpandDirection">
            <summary>
            ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandDown">
            <summary>
            Down expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandUp">
            <summary>
            Up expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandLeft">
            <summary>
            Left expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandRight">
            <summary>
            Right expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupHasItems">
            <summary>
            HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateHasItems">
            <summary>
            HasItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNoItems">
            <summary>
            NoItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupIncrease">
            <summary>
            Increment state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseEnabled">
            <summary>
            State enabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseDisabled">
            <summary>
            State disabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupDecrease">
            <summary>
            Decrement state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseEnabled">
            <summary>
            State enabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseDisabled">
            <summary>
            State disabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupInteractionMode">
            <summary>
            InteractionMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateEdit">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisplay">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupLocked">
            <summary>
            DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateLocked">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnlocked">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateActive">
            <summary>
            Active state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInactive">
            <summary>
            Inactive state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupActive">
            <summary>
            Active state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnwatermarked">
            <summary>
            Non-watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateWatermarked">
            <summary>
            Watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupWatermark">
            <summary>
            Watermark state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonUnfocused">
            <summary>
            Unfocused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonFocused">
            <summary>
            Focused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCalendarButtonFocus">
            <summary>
            CalendarButtons Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateBusy">
            <summary>
            Busy state for BusyIndicator.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIdle">
            <summary>
            Idle state for BusyIndicator.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupBusyStatus">
            <summary>
            Busyness group name.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateVisible">
            <summary>
            Visible state name for BusyIndicator.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateHidden">
            <summary>
            Hidden state name for BusyIndicator.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupVisibility">
            <summary>
            BusyDisplay group.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GoToState(System.Windows.Controls.Control,System.Boolean,System.String[])">
            <summary>
            Use VisualStateManager to change the visual state of the control.
            </summary>
            <param name="control">
            Control whose visual state is being changed.
            </param>
            <param name="useTransitions">
            A value indicating whether to use transitions when updating the
            visual state, or to snap directly to the new visual state.
            </param>
            <param name="stateNames">
            Ordered list of state names and fallback states to transition into.
            Only the first state to be found will be used.
            </param>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GetImplementationRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <param name="dependencyObject">The DependencyObject.</param>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
            <returns>Returns the implementation root or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.TryGetVisualStateGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            This method tries to get the named VisualStateGroup for the 
            dependency object. The provided object's ImplementationRoot will be 
            looked up in this call.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="groupName">The visual state group's name.</param>
            <returns>Returns null or the VisualStateGroup object.</returns>
        </member>
        <member name="T:System.Windows.Controls.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.OnEvent(`1,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DesignerProperties">
            <summary>
            Provides a custom implementation of DesignerProperties.GetIsInDesignMode
            to work around an issue.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DesignerProperties.GetIsInDesignMode(System.Windows.DependencyObject)">
            <summary>
            Returns whether the control is in design mode (running under Blend
            or Visual Studio).
            </summary>
            <param name="element">The element from which the property value is
            read.</param>
            <returns>True if in design mode.</returns>
        </member>
        <member name="F:System.Windows.Controls.DesignerProperties._isInDesignMode">
            <summary>
            Stores the computed InDesignMode value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ContextMenu">
            <summary>
            Represents a pop-up menu that enables a control to expose functionality that is specific to the context of the control.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.Primitives.MenuBase">
            <summary>
            Represents a control that defines choices for users to select.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.MenuBase.ItemContainerStyleProperty">
            <summary>
            Identifies the ItemContainerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.MenuBase.#ctor">
            <summary>
            Initializes a new instance of the MenuBase class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.MenuBase.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines whether the specified item is, or is eligible to be, its own item container.
            </summary>
            <param name="item">The item to check whether it is an item container.</param>
            <returns>True if the item is a MenuItem or a Separator; otherwise, false.</returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.MenuBase.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element used to display the specified item.
            </summary>
            <returns>A MenuItem.</returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.MenuBase.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">Element used to display the specified item.</param>
            <param name="item">Specified item.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.MenuBase.HasDefaultValue(System.Windows.Controls.Control,System.Windows.DependencyProperty)">
            <summary>
            Checks whether a control has the default value for a property.
            </summary>
            <param name="control">The control to check.</param>
            <param name="property">The property to check.</param>
            <returns>True if the property has the default value; false otherwise.</returns>
        </member>
        <member name="P:System.Windows.Controls.Primitives.MenuBase.ItemContainerStyle">
            <summary>
            Gets or sets the Style that is applied to the container element generated for each item.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ContextMenu._rootVisual">
            <summary>
            Stores a reference to the current root visual.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ContextMenu._mousePosition">
            <summary>
            Stores the last known mouse position (via MouseMove).
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ContextMenu._owner">
            <summary>
            Stores a reference to the object that owns the ContextMenu.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ContextMenu._popup">
            <summary>
            Stores a reference to the current Popup.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ContextMenu._overlay">
            <summary>
            Stores a reference to the current overlay.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ContextMenu._popupAlignmentPoint">
            <summary>
            Stores a reference to the current Popup alignment point.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ContextMenu._settingIsOpen">
            <summary>
            Stores a value indicating whether the IsOpen property is being updated by ContextMenu.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ContextMenu.HorizontalOffsetProperty">
            <summary>
            Identifies the HorizontalOffset dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ContextMenu.VerticalOffsetProperty">
            <summary>
            Identifies the VerticalOffset dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.OnHorizontalVerticalOffsetChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the HorizontalOffset or VerticalOffset DependencyProperty.
            </summary>
            <param name="o">DependencyObject that changed.</param>
            <param name="e">Event data for the DependencyPropertyChangedEvent.</param>
        </member>
        <member name="F:System.Windows.Controls.ContextMenu.IsOpenProperty">
            <summary>
            Identifies the IsOpen dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.OnIsOpenChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the IsOpen DependencyProperty.
            </summary>
            <param name="o">DependencyObject that changed.</param>
            <param name="e">Event data for the DependencyPropertyChangedEvent.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.OnIsOpenChanged(System.Boolean,System.Boolean)">
            <summary>
            Handles changes to the IsOpen property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.OnOpened(System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Opened event occurs.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.OnClosed(System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Closed event occurs.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.#ctor">
            <summary>
            Initializes a new instance of the ContextMenu class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the left mouse button is pressed.
            </summary>
            <param name="e">The event data for the MouseLeftButtonDown event.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the right mouse button is pressed.
            </summary>
            <param name="e">The event data for the MouseRightButtonDown event.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Responds to the KeyDown event.
            </summary>
            <param name="e">The event data for the KeyDown event.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.HandleLayoutUpdated(System.Object,System.EventArgs)">
            <summary>
            Handles the LayoutUpdated event to capture Application.Current.RootVisual.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.HandleRootVisualMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the RootVisual's MouseMove event to track the last mouse position.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.HandleOwnerMouseRightButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseRightButtonDown event for the owning element.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.InitializeRootVisual">
            <summary>
            Initialize the _rootVisual property (if possible and not already done).
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.FocusNextItem(System.Boolean)">
            <summary>
            Sets focus to the next item in the ContextMenu.
            </summary>
            <param name="down">True to move the focus down; false to move it up.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.ChildMenuItemClicked">
            <summary>
            Called when a child MenuItem is clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.HandleContextMenuOrRootVisualSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Handles the SizeChanged event for the ContextMenu or RootVisual.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.HandleOverlayMouseButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseButtonDown events for the overlay.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.UpdateContextMenuPlacement">
            <summary>
            Updates the location and size of the Popup and overlay.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.OpenPopup(System.Windows.Point)">
            <summary>
            Opens the Popup.
            </summary>
            <param name="position">Position to place the Popup.</param>
        </member>
        <member name="M:System.Windows.Controls.ContextMenu.ClosePopup">
            <summary>
            Closes the Popup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ContextMenu.Owner">
            <summary>
            Gets or sets the owning object for the ContextMenu.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ContextMenu.HorizontalOffset">
            <summary>
            Gets or sets the horizontal distance between the target origin and the popup alignment point.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ContextMenu.VerticalOffset">
            <summary>
            Gets or sets the vertical distance between the target origin and the popup alignment point.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ContextMenu.IsOpen">
            <summary>
            Gets or sets a value indicating whether the ContextMenu is visible.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.ContextMenu.Opened">
            <summary>
            Occurs when a particular instance of a ContextMenu opens.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.ContextMenu.Closed">
            <summary>
            Occurs when a particular instance of a ContextMenu closes.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ContextMenuService">
            <summary>
            Provides the system implementation for displaying a ContextMenu.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.ContextMenuService.GetContextMenu(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the ContextMenu property of the specified object.
            </summary>
            <param name="obj">Object to query concerning the ContextMenu property.</param>
            <returns>Value of the ContextMenu property.</returns>
        </member>
        <member name="M:System.Windows.Controls.ContextMenuService.SetContextMenu(System.Windows.DependencyObject,System.Windows.Controls.ContextMenu)">
            <summary>
            Sets the value of the ContextMenu property of the specified object.
            </summary>
            <param name="obj">Object to set the property on.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="F:System.Windows.Controls.ContextMenuService.ContextMenuProperty">
            <summary>
            Identifies the ContextMenu attached property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ContextMenuService.OnContextMenuChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the ContextMenu DependencyProperty.
            </summary>
            <param name="o">DependencyObject that changed.</param>
            <param name="e">Event data for the DependencyPropertyChangedEvent.</param>
        </member>
        <member name="T:System.Windows.Controls.MenuItem">
            <summary>
            Represents a selectable item inside a Menu or ContextMenu.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.MenuItem._isFocused">
            <summary>
            Stores a value indicating whether this element has logical focus.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.MenuItem.CommandProperty">
            <summary>
            Identifies the Command dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnCommandChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Command DependencyProperty.
            </summary>
            <param name="o">DependencyObject that changed.</param>
            <param name="e">Event data for the DependencyPropertyChangedEvent.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnCommandChanged(System.Windows.Input.ICommand,System.Windows.Input.ICommand)">
            <summary>
            Handles changes to the Command property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.MenuItem.CommandParameterProperty">
            <summary>
            Identifies the CommandParameter dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnCommandParameterChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the CommandParameter DependencyProperty.
            </summary>
            <param name="o">DependencyObject that changed.</param>
            <param name="e">Event data for the DependencyPropertyChangedEvent.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnCommandParameterChanged(System.Object,System.Object)">
            <summary>
            Handles changes to the CommandParameter property.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="F:System.Windows.Controls.MenuItem.IconProperty">
            <summary>
            Identifies the Icon dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.#ctor">
            <summary>
            Initializes a new instance of the MenuItem class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnApplyTemplate">
            <summary>
            Called when the template's tree is generated.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Invoked whenever an unhandled GotFocus event reaches this element in its route.
            </summary>
            <param name="e">A RoutedEventArgs that contains event data.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Raises the LostFocus routed event by using the event data that is provided.
            </summary>
            <param name="e">A RoutedEventArgs that contains event data.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called whenever the mouse enters a MenuItem.
            </summary>
            <param name="e">The event data for the MouseEnter event.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called whenever the mouse leaves a MenuItem.
            </summary>
            <param name="e">The event data for the MouseLeave event.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the left mouse button is pressed.
            </summary>
            <param name="e">The event data for the MouseLeftButtonDown event.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the right mouse button is pressed.
            </summary>
            <param name="e">The event data for the MouseRightButtonDown event.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Responds to the KeyDown event.
            </summary>
            <param name="e">The event data for the KeyDown event.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the Items property changes.
            </summary>
            <param name="e">The event data for the ItemsChanged event.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.OnClick">
            <summary>
            Called when a MenuItem is clicked and raises a Click event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.HandleCanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the CanExecuteChanged event of the Command property.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.UpdateIsEnabled">
            <summary>
            Updates the IsEnabled property.
            </summary>
            <remarks>
            WPF overrides the local value of IsEnabled according to ICommand, so Silverlight does, too.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.MenuItem.ChangeVisualState(System.Boolean)">
            <summary>
            Changes to the correct visual state(s) for the control.
            </summary>
            <param name="useTransitions">True to use transitions; otherwise false.</param>
        </member>
        <member name="E:System.Windows.Controls.MenuItem.Click">
            <summary>
            Occurs when a MenuItem is clicked.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.MenuItem.ParentMenuBase">
            <summary>
            Gets or sets a reference to the MenuBase parent.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.MenuItem.Command">
            <summary>
            Gets or sets the command associated with the menu item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.MenuItem.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the Command property of a MenuItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.MenuItem.Icon">
            <summary>
            Gets or sets the icon that appears in a MenuItem.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Separator">
            <summary>
            Control that is used to separate items in items controls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.Separator.#ctor">
            <summary>
            Initializes a new instance of the Separator class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainUpDown">
            <summary>
            Represents a control that enables single value selection from a 
            domain of values through a Spinner and TextBox.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.UpDownBase`1">
            <summary>
            Base class for all controls that provide value manipulation with a 
            Spinner and a text box.
            </summary>
            <typeparam name="T">Type of Value property.</typeparam>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.UpDownBase">
            <summary>
            Base class for all controls that provide value manipulation with a 
            Spinner and a text box.
            </summary>
            <remarks>
            This non generic base class is used to specify default template,
            and simulate covariance among sub classes of UpDownBase&lt;T&gt;.
            </remarks>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.ElementTextName">
            <summary>
            Name constant for Text template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.ElementSpinnerName">
            <summary>
            Name constant for Spinner template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.SpinnerStyleName">
            <summary>
            Name constant for SpinnerStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.SpinnerStyleProperty">
            <summary>
            Identifies the SpinnerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.OnSpinnerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed callback for SpinnerStyleProperty.
            </summary>
            <param name="d">UpDownBase whose SpinnerStyleProperty changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.#ctor">
            <summary>
            Initializes a new instance of the UpDownBase class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.OnSpinnerStyleChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Called when SpinnerStyle property value has changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.GetValue">
            <summary>
            GetValue method for returning UpDownBase&lt;T&gt;.Value as object.
            </summary>
            <returns>Value as object type.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.SetValue(System.Object)">
            <summary>
            SetValue method for setting UpDownBase&lt;T&gt;.Value through object type parameter.
            </summary>
            <param name="value">New value in object type.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase.SpinnerStyle">
            <summary>
            Gets or sets the Style that is applied to the spinner.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality. Making it internal for subclass access.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._textBox">
            <summary>
            Private field for Text template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._text">
            <summary>
            Private field to hold previous value of TextBox.Text.
            </summary>
            <remarks>
            Because TextBox.TextChanged seems to fire randomly, 
            so we compensatethat by handling LostFocus,
            and comparing TextBox.Text with cached previous value.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._spinner">
            <summary>
            Private field for Spinner template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">UpDownBase whose Value changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1.IsEditableProperty">
            <summary>
            Identifies the IsEditable dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnIsEditablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsEditableProperty property changed handler.
            </summary>
            <param name="d">UpDownBase that changed its IsEditable.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.#ctor">
            <summary>
            Initializes a new instance of the UpDownBase(of T) class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.GetValue">
            <summary>
            GetValue override to return Value property as object type.
            </summary>
            <returns>The Value property as object type.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.SetValue(System.Object)">
            <summary>
            SetValue override to set value to Value property.
            </summary>
            <param name="value">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnApplyTemplate">
            <summary>
            Builds the visual tree for the UpDownBase(of T) control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <remarks>
            Only support up and down arrow keys.
            </remarks>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Provides handling for the MouseWheel event.
            </summary>
            <param name="e">Mouse wheel event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.DoDecrement">
            <summary>
            Performs an increment if conditions allow it.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.DoIncrement">
            <summary>
            Performs a decrement if conditions allow it.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnTextLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for Text template part's LostFocus event.
            We use this event to compare current TextBox.Text with cached previous 
            value to decide whether user has typed in a new value. 
            </summary>
            <param name="sender">The Text template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.ProcessUserInput">
            <summary>
            Called OnLostFocus and OnKeyDown(Key.Enter) to process user input.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnTextGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for Text template part's GotFocus event.
            This event handler selects the whole text on GotFocus when nothing is selected.
            </summary>
            <param name="sender">The Text template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.SetTextBoxText">
            <summary>
            Display current value in Text template part.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnSpinnerSpin(System.Object,System.Windows.Controls.SpinEventArgs)">
            <summary>
            Event handler for Spinner template part's Spin event.
            </summary>
            <param name="sender">The Spinner template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.ApplyValue(System.String)">
            <summary>
            Processes user input when the TextBox.TextChanged event occurs.
            </summary>
            <param name="text">User input.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnParseError(System.Windows.Controls.UpDownParseErrorEventArgs)">
            <summary>
            Raises the ParserError event when there is an error in parsing user input.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnParsing(System.Windows.Controls.UpDownParsingEventArgs{`0})">
            <summary>
            Raises the <see cref="E:Parsing"/> event, to allow easily hooking
            into the parse logic.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Controls.UpDownParsingEventArgs`1"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnSpin(System.Windows.Controls.SpinEventArgs)">
            <summary>
            Occurs when the spinner spins.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{`0})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{`0})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnIsEditableChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when IsEditable property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.SelectAllText">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.FormatValue">
            <summary>
            Renders the value property into the textbox text.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.Text">
            <summary>
            Gets the Text template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.Spinner">
            <summary>
            Gets the Spinner template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.Value">
            <summary>
            Gets or sets the Value property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.IsEditable">
            <summary>
            Gets or sets a value indicating whether the value can be manually 
            edited by the end-user.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.ValueChanging">
            <summary>
            Occurs when Value property is changing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.ValueChanged">
            <summary>
            Occurs when Value property has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.Parsing">
            <summary>
            Occurs when a value is being parsed and allows custom parsing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.ParseError">
            <summary>
            Occurs when there is an error in parsing user input and allows adding parsing logic.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.GroupDomain">
            <summary>
            Domain state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.StateInvalid">
            <summary>
            InvalidDomain of the Domain state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.StateValid">
            <summary>
            Valid of the Domain state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._items">
            <summary>
            Backing store for the Items collection, when ItemsSource is null.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._valueDuringInitialization">
            <summary>
            The value as set during initialization. Since no items have been added
            at that point, the value will be reset. However, during 
            initialization, the value will be cached in this field and used
            when items are actually added. 
            </summary>
            <remarks>After this index has been used, it will be set to new object().</remarks>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._isNotAllowedToEditByFocus">
            <summary>
            Indicates whether the control should not move to EditMode when
            it is gains Focus.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._weakEventListener">
            <summary>
            WeakEventListener used to handle INotifyCollectionChanged events.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._isEditing">
            <summary>
            BackingField for IsEditing, indicating whether the control is in EditMode.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._isInvalidInput">
            <summary>
            Backing field for InvalidInput, indicating whether the last parsed input was invalid.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.CurrentIndexProperty">
            <summary>
            Identifies the CurrentIndex dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnCurrentIndexPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CurrentIndexProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed its CurrentIndex.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.IsValidCurrentIndex(System.Int32)">
            <summary>
            SelectedIndexProperty validation handler.
            </summary>
            <param name="value">New value of SelectedIndexProperty.</param>
            <returns>
            Returns true if value is valid for SelectedIndexProperty, false otherwise.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.CoerceSelectedIndex(System.Int32)">
            <summary>
            CurrentIndexProperty coercion handler.
            </summary>
            <param name="index">The index.</param>
            <returns>
            Coerced effective value of CurrentIndexProperty from input parameter value.
            </returns>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._initialCurrentIndex">
            <summary>
            Cached previous value of SelectedIndexProperty.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._currentIndexDuringInitialization">
            <summary>
            The index as set during initialization. Since no items have been added
            at that point, an Exception should be thrown. However, during 
            initialization, the index will be cached in this field and used
            when items are actually added. 
            </summary>
            <remarks>After this index has been used, it will be set to -1.</remarks>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._currentIndexNestLevel">
            <summary>
            Nest level for selected index.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.IsCyclicProperty">
            <summary>
            Identifies the IsCyclic dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnIsCyclicPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsCyclicProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed its IsCyclic value.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._valueBindingEvaluator">
            <summary>
            Gets or sets the BindingEvaluator, a framework element that can
            provide updated string values from a single binding.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.InvalidInputActionProperty">
            <summary>
            Identifies the InvalidInputAction dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnInvalidInputActionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            InvalidInputAction property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed the InvalidInputAction.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.FallbackItemProperty">
            <summary>
            Identifies the FallbackItem dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnItemsSourcePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemsSourceProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown that changed its ItemsSource.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.ItemTemplateProperty">
            <summary>
            Identifies the ItemTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DomainUpDown"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnApplyTemplate">
            <summary>
            Builds the visual tree for the DomainUpDown control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnCreateAutomationPeer">
            <summary>
            Returns a DomainUpDownAutomationPeer for use by the 
            Silverlight automation infrastructure.
            </summary>
            <returns>
            The class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> subclass to return.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.GetActualItems">
            <summary>
            Gets the correct items collection that we are using, abstracting away ItemsSource and Items logic.
            </summary>
            <returns>Returns either Items or ItemsSource.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnItemsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the items collection is changed. This can either be Items or ItemsSource.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
            <remarks>If ItemsSource does not implement INotifyCollectionChanged, this method will not be called on
            changes in the ItemsSource.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when ItemsSource has changed.
            Handles setting the selected item.
            </summary>
            <param name="oldItemsSource">The old items source.</param>
            <param name="itemsSource">The items source.</param>
            <remarks>When switching ItemsSource, the selectedIndex will be used (if possible) 
            to select an item in the new collection.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Object})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
            <remarks>Cancels the event when the value is not part of the domain.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
            <remarks>Will set CurrentIndex.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnCurrentIndexChanged(System.Int32,System.Int32)">
            <summary>
            Processes changes to the CurrentIndex property.
            </summary>
            <param name="oldValue">The old value of CurrentIndex.</param>
            <param name="newValue">The new value of CurrentIndex.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.ApplyValue(System.String)">
            <summary>
            Processes user input when the TextBox.TextChanged event occurs.
            </summary>
            <param name="text">User input.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input as a value in the domain.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
            <remarks>An empty string will return the currently selected value.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.FormatValue">
            <summary>
            Renders the value property into the textbox text.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase. 
            </summary>
            <remarks>If the IsCyclic property is set to true the DomainUpDown 
            control will not increment when the selected item is the last item.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Decrease. 
            </summary>
            <remarks>If the IsCyclic property is set to true the DomainUpDown 
            control will not decrement when the selected item is the first item. </remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.SetValidSpinDirection">
            <summary>
            Sets the valid spin direction based on current index, minimum and maximum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonDown event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonUp event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.TryEnterEditMode">
            <summary>
            Tries the enter edit mode.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.SelectAllText">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">True to use transitions when updating the visual state, false to
            snap directly to the new visual state.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.GetIndexOf(System.Collections.IEnumerable,System.Object)">
            <summary>
            Gets the index of a sequence.
            </summary>
            <param name="sequence">The sequence that contains the item of interest.</param>
            <param name="item">The item that contained within the sequence.</param>
            <returns>The index of the item in the sequence. -1 if the item was not found.</returns>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.Items">
            <summary>
            Gets a collection of items which represent the domain 
            in the DomainUpDown control.
            </summary>
            <remarks>When ItemsSource is set, will return a copy of the items in ItemsSource.
            When ItemsSource property is not set (set to null) this collection 
            will return an empty writeable colection.</remarks>
            <value>The items.</value>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.IsEditing">
            <summary>
            Gets a value indicating whether the control is in EditMode.
            </summary>
            <value><c>True</c> if currently in edit mode; otherwise, <c>False</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.IsInvalidInput">
            <summary>
            Gets or sets a value indicating whether the last parsed input was invalid.
            </summary>
            <value><c>True</c> if input is currently Invalid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.CurrentIndex">
            <summary>
            Gets or sets the index of the current selected item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.IsCyclic">
            <summary>
            Gets or sets a value indicating whether the DomainUpDown control 
            will cycle through values when trying to spin the first and last item. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ValueMemberBinding">
            <summary>
            Gets or sets the Binding object used for object to string 
            conversions.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ValueMemberPath">
            <summary>
            Gets or sets the Binding Path to use for identifying the value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.InvalidInputAction">
            <summary>
            Gets or sets a value determining the DomainUpDown behavior when a 
            user sets a value not included in the domain.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.FallbackItem">
            <summary>
            Gets or sets the item that is used when a user attempts to 
            set a value not included in the domain.
            </summary>
            <remarks>FallbackItem will only be used if it is contained within 
            the Items collection.</remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ItemsSource">
            <summary>
            Gets or sets a collection of items which represent the 
            domain in the DomainUpDown control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ItemTemplate">
            <summary>
            Gets or sets the DataTemplate used to display an item from the 
            Domain when the item is selected.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.DomainUpDownAutomationPeer">
            <summary>
            Exposes DomainUpDown types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1">
            <summary>
            Exposes UpDownBase types to UI Automation.
            </summary>
            <typeparam name="T">Type of the items.</typeparam>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.#ctor(System.Windows.Controls.UpDownBase{`0})">
            <summary>
            Initializes a new instance of the UpDownBaseAutomationPeer class.
            </summary>
            <param name="owner">
            The UpDownBase that is associated with this UpDownBaseAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the UpDownBase that is associated
            with this UpDownBaseAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>Group AutomationControlType.</returns>
            <remarks>Return AutomationControlType.Spinner per MSDN article.</remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.GetClassNameCore">
            <summary>
            Gets the name of the UpDownBase that is associated with this
            UpDownBaseAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name UpDownBase.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the UpDownBase that is associated
            with this UpDownBaseAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.SetValue(System.String)">
            <summary>
            Sets the value of a control from a string.
            </summary>
            <param name="value">The value to set.</param>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.OwnerUpDown">
            <summary>
            Gets the UpDownBase that owns this UpDownBaseAutomationPeer.
            </summary>
            <value>The domain up down.</value>
        </member>
        <member name="P:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the value of a control is read-only.
            </summary>
            <value></value>
            <returns>true if the value is read-only; false if it can be modified.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.Value">
            <summary>
            Gets the value of the control.
            </summary>
            <value></value>
            <returns>
            The value of the control as a string.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.DomainUpDownAutomationPeer.#ctor(System.Windows.Controls.DomainUpDown)">
            <summary>
            Initializes a new instance of the DomainUpDownAutomationPeer class.
            </summary>
            <param name="owner">
            The DomainUpDown that is associated with this DomainUpDownAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DomainUpDownAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the DomainUpDown that is associated with this
            DomainUpDownAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name DomainUpDown.</returns>
        </member>
        <member name="T:System.Windows.Controls.InvalidInputAction">
            <summary>
            Determines the behavior of a DomainUpDown control when a user sets a 
            value not included in the domain.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InvalidInputAction.UseFallbackItem">
            <summary>
            Once a user sets a value not included in the domain, the DomainUpDown 
            control will use the FallbackItem property as the selected item. If 
            FallbackItem is not specified the first item in the DomainUpDown Items 
            collection will be used.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InvalidInputAction.TextBoxCannotLoseFocus">
            <summary>
            Once a user sets a value not included in the domain, the 
            DomainUpDown control cannot lose focus.
            </summary>
            <remarks>There are situations that the control can not regain focus.</remarks>
        </member>
        <member name="T:System.Windows.Controls.ObservableObjectCollection">
            <summary>
            Implements a collection of objects.
            </summary>
            <remarks>
            ObservableObjectCollection is intended to simplify the task of populating an
            ItemsSource property in XAML and allows for readonly collections.
            </remarks>
            <example>
            <code language="XAML">
            <![CDATA[
            <ItemsControl.ItemsSource>
                <controls:ObservableObjectCollection>
                    <TextBlock Text="Object 1" />
                    <TextBlock Text="Object 2" />
                </controls:ObservableObjectCollection>
            </ItemsControl.ItemsSource>
            ]]>
            </code>
            </example>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ObservableObjectCollection"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ObservableObjectCollection"/> class.
            </summary>
            <param name="collection">The collection whose items will be copied.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.InsertItem(System.Int32,System.Object)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.SetItem(System.Int32,System.Object)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ObservableObjectCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read only.
            </summary>
            <value><c>True</c> if read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.ObservableObjectCollection.System#Collections#Generic#ICollection{System#Object}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.NumericUpDown">
            <summary>
            Represents a control that enables single value selection from a numeric
            range of values through a Spinner and TextBox.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its Minimum.</param>
            <param name="e">DependencyPropertyChangedEventArgs for Minimum property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMinimumChanged(System.Double,System.Double)">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its Maximum.</param>
            <param name="e">DependencyPropertyChangedEventArgs for Maximum property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMaximumChanged(System.Double,System.Double)">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.IncrementProperty">
            <summary>
            Identifies the Increment dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnIncrementPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IncrementProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its Increment property.</param>
            <param name="e">DependencyPropertyChangedEventArgs for Increment property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnIncrementChanged(System.Double,System.Double)">
            <summary>
            Called when the Increment property value has changed.
            </summary>
            <param name="oldValue">Old value of the Increment property.</param>
            <param name="newValue">New value of the Increment property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.DecimalPlacesProperty">
            <summary>
            Identifies the DecimalPlaces dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnDecimalPlacesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DecimalPlacesProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its DecimalPlaces.</param>
            <param name="e">DependencyPropertyChangedEventArgs for DecimalPlaces property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnDecimalPlacesChanged(System.Int32,System.Int32)">
            <summary>
            Called when the DecimalPlaces property value has changed.
            </summary>
            <param name="oldValue">Old value of the DecimalPlaces property.</param>
            <param name="newValue">New value of the DecimalPlaces property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.formatString">
            <summary>
            Format string used to display Value property.
            </summary>
            <seealso cref="P:System.Windows.Controls.NumericUpDown.DecimalPlaces"/>
            <seealso cref="M:System.Windows.Controls.NumericUpDown.FormatValue"/>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.#ctor">
            <summary>
            Initializes a new instance of the NumericUpDown class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.SetValidSpinDirection">
            <summary>
            Sets the valid spin direction based on current value, minimum and maximum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnApplyTemplate">
            <summary>
            Builds the visual tree for the NumericUpDown control when a new
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnCreateAutomationPeer">
            <summary>
            Returns a NumericUpDownAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>A NumericUpDownAutomationPeer object for the NumericUpDown.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Double})">
            <summary>
            Override UpDownBase&lt;T&gt;.OnValueChanging to do validation and coercion.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Override UpDownBase&lt;T&gt;.OnValueChanged to raise value changed automation event and 
            determine if a maximum or minimum has been reached.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input as a decimal number.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.FormatValue">
            <summary>
            Provides decimal specific value formatting for the value property.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Decrease.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._levelsFromRootCall">
            <summary>
            Levels from root call.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialInc">
            <summary>
            Initial Increment value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialMin">
            <summary>
            Initial Minimum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialMax">
            <summary>
            Initial Maximum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialVal">
            <summary>
            Initial Minimum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedInc">
            <summary>
            Requested Increment value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedMin">
            <summary>
            Requested Minimum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedMax">
            <summary>
            Requested Maximum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedVal">
            <summary>
            Requested Value value.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.CoerceMaximum">
            <summary>
            Ensure the Maximum is greater than or equal to the Minimum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.CoerceValue">
            <summary>
            Ensure the value falls between the Minimum and Maximum values.
            This function assumes that (Maximum >= Minimum).
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.IsValidDoubleValue(System.Object,System.Double@)">
            <summary>
            Check if an object value is a valid double value.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="number">The double value to be returned.</param>
            <returns>true if a valid double; false otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidDoubleValue(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Ensure the new value of a dependency property change is a valid double value, 
            or revert the change and throw an exception.
            </summary>
            <remarks>
            EnsureValidDoubleValue(DependencyObject d, DependencyPropertyChangedEventArgs e) is simply a wrapper for 
            EnsureValidDoubleValue(DependencyObject d, DependencyProperty property, object oldValue, object newValue).
            </remarks>
            <param name="d">The DependencyObject whose DependencyProperty is changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidDoubleValue(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object,System.Object)">
            <summary>
            Ensure the new value of a dependency property change is a valid double value, 
            or revert the change and throw an exception.
            </summary>
            <param name="d">The DependencyObject whose DependencyProperty is changed.</param>
            <param name="property">The DependencyProperty that changed.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidIncrementValue(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Ensure the new value of Increment dependency property change is valid, 
            or revert the change and throw an exception.
            </summary>
            <param name="d">The DependencyObject whose DependencyProperty is changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidDecimalPlacesValue(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Ensure the new value of DecimalPlaces dependency property change is valid, 
            or revert the change and throw an exception.
            </summary>
            <param name="d">The DependencyObject whose DecimalPlaces DependencyProperty is changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">True to use transitions when updating the visual state, false to snap directly to the new visual state.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">A value indicating whether to automatically generate transitions to the new state, or instantly transition to the new state.</param>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.Minimum">
            <summary>
            Gets or sets the Minimum possible Value.
            </summary>
            <remarks>
            The default value is zero.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.Maximum">
            <summary>
            Gets or sets the Maximum possible Value.
            </summary>
            <remarks>
            The default values is one.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.Increment">
            <summary>
            Gets or sets a value added or subtracted from the value property.
             </summary>
            <remarks>
            The default values is one.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places that are displayed in the 
            NumericUpDown. 
            </summary>
            <remarks>
            The default value is zero.
            
            DecimalPlaces decides output format of Value property.
            It is implemented via formatString field and FormatValue override.
            </remarks>
        </member>
        <member name="T:System.Windows.Automation.Peers.NumericUpDownAutomationPeer">
            <summary>
            Exposes NumericUpDown types to UI Automation.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.#ctor(System.Windows.Controls.NumericUpDown)">
            <summary>
            Initializes a new instance of the NumericUpDownAutomationPeer class.
            </summary>
            <param name="owner">
            The NumericUpDown that is associated with this NumericUpDownAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the NumericUpDown that is associated with this
            NumericUpDownAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name NumericUpDown.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the NumericUpDown that is associated
            with this NumericUpDownAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SetValue(System.Double)">
            <summary>
            Sets the value of the NumericUpDown.
            </summary>
            <param name="value">The value to set.</param>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#IsReadOnly">
            <summary>
            Gets a value indicating whether the value of the NumericUpDown is read-only.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#LargeChange">
            <summary>
            Gets the value to be added or subtracted from the Value property of the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Maximum">
            <summary>
            Gets the maximum value supported by the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Minimum">
            <summary>
            Gets minimum value supported by the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SmallChange">
            <summary>
            Gets the value to be added or subtracted from the Value property of the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Value">
            <summary>
            Gets the value of the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.EnumerableExtensions">
            <summary>
            Extension methods for Enumerable.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.Range(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a sequence from an integer, to an integer, skipping 
            a defined amount of integers.
            </summary>
            <param name="from">The value of the first integer in the sequence.</param>
            <param name="to">The inclusive end of the sequence.</param>
            <param name="by">The amount of integers to skip.</param>
            <returns>A sequence of integers.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applies an action to each element in an IEnumerable.
            </summary>
            <typeparam name="T">The Type of the elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="action">The action applied to all the elements.</param>
            <remarks>See a discussion about the merits on this function here:
            http://blogs.msdn.com/ericlippert/archive/2009/05/18/foreach-vs-foreach.aspx.</remarks>
        </member>
        <member name="T:System.Windows.Controls.Primitives.Clipper">
            <summary>
            Clips a ratio of its content.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.Clipper.RatioVisibleProperty">
            <summary>
            Identifies the RatioVisible dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.Clipper.OnRatioVisibleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            RatioVisibleProperty property changed handler.
            </summary>
            <param name="d">PartialView that changed its RatioVisible.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.Clipper.OnRatioVisibleChanged(System.Double,System.Double)">
            <summary>
            RatioVisibleProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.Primitives.Clipper.#ctor">
            <summary>
            Initializes a new instance of the Clipper class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.Clipper.ClipContent">
            <summary>
            Updates the clip geometry.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.Clipper.RatioVisible">
            <summary>
            Gets or sets the percentage of the item visible.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.EnumerableFunctions">
            <summary>
            This class contains general purpose functions to manipulate the generic
            IEnumerable type.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EnumerableFunctions.Scan``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1,``0,``1},``1)">
            <summary>
            Applies a function to an accumulated value and an item in the 
            sequence and yields the result as the accumulated value.
            </summary>
            <typeparam name="T">The type of the input sequence.</typeparam>
            <typeparam name="R">The type of the initial value.</typeparam>
            <param name="that">The sequence to scan.</param>
            <param name="func">The function applied to the accumulator and the
            current item.</param>
            <param name="initialValue">The initial value in the output sequence.
            </param>
            <returns>A sequence of computed values.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableFunctions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Accepts two sequences and applies a function to the corresponding 
            values in the two sequences.
            </summary>
            <typeparam name="T0">The type of the first sequence.</typeparam>
            <typeparam name="T1">The type of the second sequence.</typeparam>
            <typeparam name="R">The return type of the function.</typeparam>
            <param name="enumerable0">The first sequence.</param>
            <param name="enumerable1">The second sequence.</param>
            <param name="func">The function to apply to the corresponding values
            from the two sequences.</param>
            <returns>A sequence of transformed values from both sequences.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableFunctions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the index of an item in a sequence.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence.</param>
            <param name="item">The item in the sequence.</param>
            <returns>The index of an item in a sequence.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableFunctions.GetWeightedValues(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Returns a stream of weighted values based on a percentage.
            </summary>
            <param name="values">A sequence of values.</param>
            <param name="percent">The percentage of values.</param>
            <returns>A sequence of percentages.</returns>
        </member>
        <member name="T:System.Windows.Controls.Primitives.LinearClipper">
            <summary>
            Clips the content of the control in a given direction.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.LinearClipper.ExpandDirectionProperty">
            <summary>
            Identifies the ExpandDirection dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.LinearClipper.OnExpandDirectionChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandDirectionProperty property changed handler.
            </summary>
            <param name="d">ExpandDirectionView that changed its ExpandDirection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.LinearClipper.OnExpandDirectionChanged(System.Windows.Controls.ExpandDirection,System.Windows.Controls.ExpandDirection)">
            <summary>
            ExpandDirectionProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.Primitives.LinearClipper.ClipContent">
            <summary>
            Updates the clip geometry.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.LinearClipper.ExpandDirection">
            <summary>
            Gets or sets the clipped edge.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.NullableConverter`1">
            <summary>
            Converts a string or base value to a <see cref="T:System.Nullable"/> value.
            </summary>
            <typeparam name="T">The type should be value type.</typeparam>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.NullableConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the 
            specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            Returns true if this converter can perform the conversion; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NullableConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the 
            specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="destinationType">The type you want to convert to.
            </param>
            <returns>
            Returns true if this converter can perform the conversion; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NullableConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="culture">The 
            <see cref="T:System.Globalization.CultureInfo"/> to use as the 
            current culture.</param>
            <param name="value">The value to convert to the type of this 
            converter.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.NullableConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts from the specified value to the a specified type from the
            type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="culture">The 
            <see cref="T:System.Globalization.CultureInfo"/> to use as the 
            current culture.</param>
            <param name="value">The value to convert to the type of this 
            converter.</param>
            <param name="destinationType">The type of convert the value to
            .</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:System.Windows.Controls.Rating">
            <summary>
            A control that has a rating.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Rating.DisplayValueProperty">
            <summary>
            Identifies the DisplayValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnDisplayValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DisplayValueProperty property changed handler.
            </summary>
            <param name="dependencyObject">Rating that changed its DisplayValue.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnDisplayValueChanged">
            <summary>
            DisplayValueProperty property changed handler.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Rating.ItemCountProperty">
            <summary>
            Identifies the ItemCount dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemCountChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemCountProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its ItemCount.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemCountChanged(System.Int32)">
            <summary>
            This method is invoked when the items count property is changed.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.Rating.IsReadOnlyProperty">
            <summary>
            Identifies the IsReadOnly dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnIsReadOnlyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsReadOnlyProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its IsReadOnly.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnIsReadOnlyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsReadOnlyProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.Rating.ItemContainerStyleProperty">
            <summary>
            Identifies the ItemContainerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemContainerStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemContainerStyleProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its ItemContainerStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemContainerStyleChanged(System.Windows.Style)">
            <summary>
            ItemContainerStyleProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.Rating.SelectionModeProperty">
            <summary>
            Identifies the SelectionMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnSelectionModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectionModeProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its SelectionMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnSelectionModeChanged(System.Windows.Controls.RatingSelectionMode,System.Windows.Controls.RatingSelectionMode)">
            <summary>
            SelectionModeProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.Rating.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its Value.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnValueChanged(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Updates the control when the items change.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.#ctor">
            <summary>
            Initializes a new instance of the Rating control.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnApplyTemplate">
            <summary>
            Applies control template to the items control.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when the mouse enters the rating item.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when the mouse leaves the rating item.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the Rating's MouseLeftButtonDown event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the Rating's MouseLeftButtonUp event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.UpdateValues">
            <summary>
            Updates the values of the rating items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.UpdateDisplayValues">
            <summary>
            Updates the value and actual value of the rating items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.UpdateHoverStates">
            <summary>
            Updates the hover states of the rating items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.GetContainerForItemOverride">
            <summary>
            This method returns a container for the item.
            </summary>
            <returns>A container for the item.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Gets a value indicating whether the item is its own container.
            </summary>
            <param name="item">The item which may be a container.</param>
            <returns>A value indicating whether the item is its own container.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            This method prepares a container to host an item.
            </summary>
            <param name="element">The container.</param>
            <param name="item">The item hosted in the container.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            This method clears a container used to host an item.
            </summary>
            <param name="element">The container that hosts the item.</param>
            <param name="item">The item hosted in the container.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.RatingItemMouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when a rating item's mouse enter event is
            invoked.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.RatingItemMouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when a rating item's mouse leave event is
            invoked.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.GetRatingItems">
            <summary>
            Returns a sequence of rating items.
            </summary>
            <returns>A sequence of rating items.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.SelectRatingItem(System.Windows.Controls.RatingItem)">
            <summary>
            Selects a rating item.
            </summary>
            <param name="selectedRatingItem">The selected rating item.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.RatingItemClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is raised when a rating item value is selected.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.GetSelectedRatingItem">
            <summary>
            Returns the selected rating item.
            </summary>
            <returns>The selected rating item.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnRatingItemValueSelected(System.Windows.Controls.RatingItem,System.Double)">
            <summary>
            This method is invoked when the rating item value is changed.
            </summary>
            <param name="ratingItem">The rating item that has changed.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnCreateAutomationPeer">
            <summary>
            Returns a RatingItemAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>A RatingItemAutomationPeer object for the RatingItem.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.KeyDown" /> event when a key
            is pressed while the control has focus.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains
            the event data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e " />is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Rating.GetRatingItemAtOffsetFrom(System.Windows.Controls.RatingItem,System.Int32)">
            <summary>
            Gets a rating item at a certain index offset from another 
            rating item.
            </summary>
            <param name="ratingItem">The rating item.</param>
            <param name="offset">The rating item at an offset from the 
            index of the rating item.</param>
            <returns>The rating item at the offset.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Updates the visual state.
            </summary>
            <param name="useTransitions">A value indicating whether to use transitions.</param>
        </member>
        <member name="P:System.Windows.Controls.Rating.DisplayValue">
            <summary>
            Gets or sets the actual value of the Rating control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.HoveredRatingItem">
            <summary>
            Gets or sets the rating item hovered over.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.Interaction">
            <summary>
            Gets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.ItemsControlHelper">
            <summary>
            Gets or sets the items control helper class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.ItemCount">
            <summary>
            Gets or sets the number of rating items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the Rating is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.ItemContainerStyle">
            <summary>
            Gets or sets the item container style.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.SelectionMode">
            <summary>
            Gets or sets the selection mode.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.Value">
            <summary>
            Gets or sets the rating value.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Rating.ValueChanged">
            <summary>
            This event is raised when the value of the rating is changed.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.RatingAutomationPeer">
            <summary>
            Exposes Rating types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.#ctor(System.Windows.Controls.Rating)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.RatingAutomationPeer"/> class.
            </summary>
            <param name="owner">The Rating that is associated with this
            RatingAutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetNameCore">
            <summary>
            Returns a name if no name is set.
            </summary>
            <returns>A name if no name is set.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetLocalizedControlTypeCore">
            <summary>
            Returns the localized control type.
            </summary>
            <returns>The localized control type.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the Rating that is associated
            with this RatingAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>List AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the Rating that is associated
            with this RatingAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetChildrenCore">
            <summary>
            Gets the collection of child elements of 
            the <see cref="T:System.Windows.Controls.ItemsControl"/> that is 
            associated with this <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer"/>.
            </summary>
            <returns>
            A collection of RatingItemAutomationPeer elements, or null if the
            Rating that is associated with this RatingAutomationPeer is
            empty.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetSelection">
            <summary>
            Retrieves a UI Automation provider for each child element that is 
            selected.
            </summary>
            <returns>An array of UI Automation providers.</returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.SetValue(System.String)">
            <summary>
            Sets a rating value.
            </summary>
            <param name="value">The value of the rating.</param>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.OwnerRating">
            <summary>
            Gets the Rating that owns this RatingAutomationPeer.
            </summary>
            <value>The Rating.</value>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.CanSelectMultiple">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            allows more than one child element to be selected concurrently.
            </summary>
            <returns>true if multiple selection is allowed; otherwise, false.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.IsSelectionRequired">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            requires at least one child element to be selected.
            </summary>
            <returns>true if selection is required; otherwise, false.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.IsReadOnly">
            <summary>
            Gets a value indicating whether the Rating is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.Value">
            <summary>
            Gets the rating value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.RatingItem">
            <summary>
            An item used in a rating control.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.StateFilled">
            <summary>
            The state in which the item is filled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.StateEmpty">
            <summary>
            The state in which the item is empty.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.GroupFill">
            <summary>
            The group that contains fill states.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.StatePartial">
            <summary>
            The state in which the item is partially filled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem._interactionHelper">
            <summary>
            The interaction helper used to get the common states working.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem._settingDisplayValue">
            <summary>
            A value indicating whether the actual value is being set.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.DisplayValueProperty">
            <summary>
            Identifies the DisplayValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnDisplayValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DisplayValueProperty property changed handler.
            </summary>
            <param name="d">RatingItem that changed its DisplayValue.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnDisplayValueChanged(System.Double,System.Double)">
            <summary>
            DisplayValueProperty property changed handler.
            </summary> 
            <param name="oldValue">The old value.</param> 
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.RatingItem._settingIsReadOnly">
            <summary>
            A value indicating whether the read only value is being set.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.IsReadOnlyProperty">
            <summary>
            Identifies the IsReadOnly dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnIsReadOnlyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsReadOnlyProperty property changed handler.
            </summary>
            <param name="d">RatingItem that changed its IsReadOnly.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnIsReadOnlyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsReadOnlyProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.RatingItem.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.SelectValue">
            <summary>
            Selects a value and raises the value selected event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.#ctor">
            <summary>
            Initializes a new instance of the RatingItem class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the RatingItem's MouseLeftButtonDown event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the RatingItem's MouseLeftButtonUp event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when the mouse enters the rating item.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when the mouse leaves the rating item.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnClick">
            <summary>
            Sets the value to 1.0 when clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Updates the visual state.
            </summary>
            <param name="useTransitions">A value indicating whether to use 
            transitions.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnCreateAutomationPeer">
            <summary>
            Returns a AccordionItemAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>A AccordionItemAutomationPeer object for the AccordionItem.</returns>
        </member>
        <member name="P:System.Windows.Controls.RatingItem.DisplayValue">
            <summary>
            Gets the actual value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RatingItem.IsReadOnly">
            <summary>
            Gets a value indicating whether the control is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RatingItem.ParentRating">
            <summary>
            Gets or sets the parent rating of this rating item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RatingItem.Value">
            <summary>
            Gets or sets the value property.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.RatingItemAutomationPeer">
            <summary>
            Exposes RatingItem types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.#ctor(System.Windows.Controls.RatingItem)">
            <summary>
            Initializes a new instance of the RatingAutomationPeer class.
            </summary>
            <param name="owner">
            The Rating that is associated with this
            RatingAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.GetLocalizedControlTypeCore">
            <summary>
            Returns the localized control type.
            </summary>
            <returns>The localized control type.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the RatingItem that is associated
            with this RatingItemAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>Custom AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the RatingItem that is associated with this
            RatingItemAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name RatingItem.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the RatingItem that is associated
            with this RatingItemAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.GetNameCore">
            <summary>
            Returns the name of the rating item.  Uses the index of the rating
            item in the list.
            </summary>
            <returns>The name of the rating item.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
            <summary>
            Adds the RatingItem to the collection of selected items.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
            <summary>
            Removes the current Rating from the collection of selected
            items.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
            <summary>
            Clears selection from currently selected items and then proceeds to
            select the current Rating.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingItemAutomationPeer.OwnerRatingItem">
            <summary>
            Gets the RatingItem that owns this RatingItemAutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
            <summary>
            Gets a value indicating whether the Rating is selected.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
            <summary>
            Gets the UI Automation provider that implements ISelectionProvider
            and acts as the container for the calling object.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.RatingSelectionMode">
            <summary>
            This type is used to determine the state of the item selected and the
            previous items.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.RatingSelectionMode.Continuous">
            <summary>
            All items before the selected ones are selected.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingSelectionMode.Individual">
            <summary>
            Only the item selected is visually distinguished.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ButtonSpinner">
            <summary>
            Represents a spinner control that includes two Buttons.
            </summary>
            <remarks>
            ButtonSpinner inherits from Spinner. 
            It adds two button template parts and a content property.
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.Spinner">
            <summary>
            Base class for controls that represents controls that can spin.
            </summary>
            <remarks>
            Spinner abstract class defines and implements common and focused visual state groups.
            Spinner abstract class defines and implements Spin event and OnSpin method.
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Spinner.ValidSpinDirectionProperty">
            <summary>
            Identifies the ValidSpinDirection dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Spinner.OnValidSpinDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValidSpinDirectionProperty property changed handler.
            </summary>
            <param name="d">ButtonSpinner that changed its ValidSpinDirection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.#ctor">
            <summary>
            Initializes a new instance of the Spinner class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Spinner.OnSpin(System.Windows.Controls.SpinEventArgs)">
            <summary>
            Raises the OnSpin event when spinning is initiated by the end-user.
            </summary>
            <param name="e">Spin event args.</param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.OnValidSpinDirectionChanged(System.Windows.Controls.ValidSpinDirections,System.Windows.Controls.ValidSpinDirections)">
            <summary>
            Called when valid spin direction changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">A value indicating whether to automatically generate transitions to the new state, or instantly transition to the new state.</param>
        </member>
        <member name="P:System.Windows.Controls.Spinner.ValidSpinDirection">
            <summary>
            Gets or sets the spin direction that is currently valid.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Spinner.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality. Making it internal for subclass access.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Spinner.Spin">
            <summary>
            Occurs when spinning is initiated by the end-user.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner.ElementIncreaseButtonName">
            <summary>
            Name constant of the IncreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner.ElementDecreaseButtonName">
            <summary>
            Name constant of the DecreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner._increaseButton">
            <summary>
            Private field for IncreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner._decreaseButton">
            <summary>
            Private field for DecreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner.ContentProperty">
            <summary>
            Identifies the Content dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnContentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ContentProperty property changed handler.
            </summary>
            <param name="d">ButtonSpinner that changed its Content.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.#ctor">
            <summary>
            Initializes a new instance of the ButtonSpinner class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ButtonSpinner control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnContentChanged(System.Object,System.Object)">
            <summary>
            Occurs when the Content property value changed.
            </summary>
            <param name="oldValue">The old value of the Content property.</param>
            <param name="newValue">The new value of the Content property.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle click event of IncreaseButton and DecreaseButton template parts,
            translating Click to appropriate Spin event.
            </summary>
            <param name="sender">Event sender, should be either IncreaseButton or DecreaseButton template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Cancel LeftMouseButtonUp events originating from a button that has
            been changed to disabled.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
            event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that
            contains the event data.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnValidSpinDirectionChanged(System.Windows.Controls.ValidSpinDirections,System.Windows.Controls.ValidSpinDirections)">
            <summary>
            Called when valid spin direction changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.SetButtonUsage">
            <summary>
            Disables or enables the buttons based on the valid spin direction.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ButtonSpinner.IncreaseButton">
            <summary>
            Gets or sets the IncreaseButton template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ButtonSpinner.DecreaseButton">
            <summary>
            Gets or sets the DecreaseButton template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ButtonSpinner.Content">
            <summary>
            Gets or sets the content that is contained within the button spinner.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.SpinDirection">
            <summary>
            Represents spin directions that could be initiated by the end-user.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.SpinDirection.Increase">
            <summary>
            Represents a spin initiated by the end-user in order to Increase a value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.SpinDirection.Decrease">
            <summary>
            Represents a spin initiated by the end-user in order to Decrease a value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.SpinEventArgs">
            <summary>
            Provides data for the Spinner.Spin event.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.SpinEventArgs.#ctor(System.Windows.Controls.SpinDirection)">
            <summary>
            Initializes a new instance of the SpinEventArgs class.
            </summary>
            <param name="direction">Spin direction.</param>
        </member>
        <member name="P:System.Windows.Controls.SpinEventArgs.Direction">
            <summary>
            Gets the SpinDirection for the spin that has been initiated by the 
            end-user.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ValidSpinDirections">
            <summary>
            Represents spin directions that are valid.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidSpinDirections.None">
            <summary>
            Can not increase nor decrease.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidSpinDirections.Increase">
            <summary>
            Can increase.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidSpinDirections.Decrease">
            <summary>
            Can decrease.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ListTimePickerPopupAutomationPeer">
            <summary>
            Exposes ListTimePickerPopup types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer">
            <summary>
            Exposes TimePickerPopup types to UI Automation.
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.#ctor(System.Windows.Controls.TimePickerPopup)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer"/> class.
            </summary>
            <param name="owner">The TimePickerPopup that is associated to this 
            AutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>Returns an AutomationPeer that can handle the the pattern,
            or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.SetValue(System.String)">
            <summary>
            Sets the value of a control from a string.
            </summary>
            <param name="value">The value to set.</param>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.RaiseValueAutomationEvent(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Raises the Value automation event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.TimePickerPopupOwner">
            <summary>
            Gets the TimePickerPopup that owns this AutomationPeer.
            </summary>
            <returns>The TimePicker that owns this AutomationPeer.</returns>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.IsReadOnly">
            <summary>
            Gets a value indicating whether the value of a control is read-only.
            </summary>
            <value></value>
            <returns>true if the value is read-only; false if it can be modified.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.Value">
            <summary>
            Gets the value of the control.
            </summary>
            <value></value>
            <returns>
            The value of the control as a string.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.#ctor(System.Windows.Controls.ListTimePickerPopup)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ListTimePickerPopupAutomationPeer"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the type of the automation control.
            </summary>
            <returns>The Calendar AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/>
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>
            Returns an AutomationPeer that can handle the the pattern,
            or null.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:System.Windows.UIElement"/> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName"/>.
            </summary>
            <returns>The string ListTimePickerPopup.</returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetSelection">
            <summary>
            Retrieves a UI Automation provider for each child element that is 
            selected.
            </summary>
            <returns>An array of UI Automation providers.</returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetChildrenCore">
            <summary>
            Returns the collection of child elements of the <see cref="T:System.Windows.UIElement"/> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren"/>.
            </summary>
            <returns>
            A list of child <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> elements.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopupAutomationPeer.TimePickerPopupOwner">
            <summary>
            Gets the ListTimePickerPopup that owns this AutomationPeer.
            </summary>
            <returns>The ListTimePickerPopup that owns this AutomationPeer.</returns>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopupAutomationPeer.OwnerListTimePickerPopup">
            <summary>
            Gets the ListTimePickerPopup that owns this AutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopupAutomationPeer.CanSelectMultiple">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            allows more than one child element to be selected concurrently.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopupAutomationPeer.IsSelectionRequired">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            requires at least one child element to be selected.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="T:System.Windows.Automation.Peers.PickerAutomationPeer">
            <summary>
            Exposes Picker types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.#ctor(System.Windows.Controls.Picker)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:System.Windows.Automation.Peers.PickerAutomationPeer"/> class.
            </summary>
            <param name="owner">The Picker that is associated to this 
            AutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the Picker that is associated
            with this PickerAutomationPeer. This method is called by
            GetAutomationControlType.
            </summary>
            <returns>ComboBox AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the Picker that is associated with this
            PickerAutomationPeer. This method is called by
            GetClassName.
            </summary>
            <returns>The name Picker.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>Returns an AutomationPeer that can handle the the pattern,
            or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.Expand">
            <summary>
            Blocking method that returns after the element has been expanded.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.Collapse">
            <summary>
            Blocking method that returns after the element has been collapsed.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.RaiseExpandCollapseAutomationEvent(System.Boolean,System.Boolean)">
            <summary>
            Raises the ExpandCollapse automation event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:System.Windows.Automation.Peers.PickerAutomationPeer.OwnerPicker">
            <summary>
            Gets the Picker that owns this AutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.PickerAutomationPeer.ExpandCollapseState">
            <summary>
            Gets an element's current Collapsed or Expanded state.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer">
            <summary>
            Exposes RangeTimePicker types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer.#ctor(System.Windows.Controls.RangeTimePickerPopup)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer"/> class.
            </summary>
            <param name="owner">The owner of this AutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:System.Windows.UIElement"/> that is 
            associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName"/>.
            </summary>
            <returns>The string RangeTimePickerPopupAutomationPeer.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the type of the automation control.
            </summary>
            <returns>The Calendar control type.</returns>
        </member>
        <member name="P:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer.TimePickerPopupOwner">
            <summary>
            Gets the RangeTimePickerPopup that owns this AutomationPeer.
            </summary>
            <returns>The RangeTimePickerPopup that owns this AutomationPeer.</returns>
        </member>
        <member name="T:System.Windows.Automation.Peers.TimePickerAutomationPeer">
            <summary>
            Exposes TimePicker types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.#ctor(System.Windows.Controls.TimePicker)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.TimePickerAutomationPeer"/> class.
            </summary>
            <param name="owner">The TimePicker that is associated to this
            AutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the TimePicker that is associated with this
            PickerAutomationPeer. This method is called by
            GetClassName.
            </summary>
            <returns>The name Picker.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/>
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>Returns an AutomationPeer that can handle the the pattern,
            or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
            <summary>
            Sets the control's text value.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.RaiseValueAutomationEvent(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Raises the Value automation event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerAutomationPeer.OwnerTimePicker">
            <summary>
            Gets the TimePicker that owns this AutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerAutomationPeer.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
            <summary>
            Gets a value indicating whether the value is read only.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerAutomationPeer.System#Windows#Automation#Provider#IValueProvider#Value">
            <summary>
            Gets a string representation of the current text value.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.TimeUpDownAutomationPeer">
            <summary>
            Exposes TimeUpDown types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimeUpDownAutomationPeer.#ctor(System.Windows.Controls.TimeUpDown)">
            <summary>
            Initializes a new instance of the TimeUpDownAutomationPeer class.
            </summary>
            <param name="owner">
            The TimeUpDown that is associated with this TimeUpDownAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimeUpDownAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the TimeUpDown that is associated with this
            TimeUpDownAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name TimeUpDown.</returns>
        </member>
        <member name="T:System.Windows.Controls.Primitives.ItemSelectionHelper`1">
            <summary>
            Exposes an ObservableCollection of T and 
            a SelectedItem property for binding purposes.
            </summary>
            <typeparam name="T">The type of items.</typeparam>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1.SelectedItemName">
            <summary>
            Name used for the SelectedItem property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1.ItemsName">
            <summary>
            Name used for the Items property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1._selectedItem">
            <summary>
            BackingField for the selected item.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1._items">
            <summary>
            BackingField for Items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ItemSelectionHelper`1.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ItemSelectionHelper`1.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="E:System.Windows.Controls.Primitives.ItemSelectionHelper`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ListTimePickerPopup">
            <summary>
            Represents a time picker popup that allows choosing time from a ListBox.
            </summary>
            <remarks>Can also be used independently.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.TimePickerPopup">
            <summary>
            Base class for a control that can be used as the popup portion in a TimePicker.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.ITimeInput">
            <summary>
            Interface describing the common value, maximum and minimum properties
            that a TimeInput control is expected to have.
            </summary>
            <remarks>Used for internal coercion of these properties.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="P:System.Windows.Controls.ITimeInput.Value">
            <summary>
            Gets or sets the current time.
            </summary>
            <value>The current time.</value>
        </member>
        <member name="P:System.Windows.Controls.ITimeInput.Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.ITimeInput.Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.ContainedStateName">
            <summary>
            The name of the visual state that represents a Popup that is 
            contained by a picker.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.NotContainedStateName">
            <summary>
            The name of the visual state that represent a Popup that is not 
            contained by a picker.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.ContainedByPickerGroupName">
            <summary>
            The name of the ContainedByPicker state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupModeGroupName">
            <summary>
            The name of the PopupMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.AllowSecondsAndDesignatorsSelectionStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            TimeDesignators, Hours, Minutes and Seconds can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.AllowTimeDesignatorsSelectionStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            TimeDesignators, Hours and Minutes can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.AllowSecondsSelectionStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            Hours, Minutes and Seconds can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.HoursAndMinutesOnlyStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            Hours and Minutes can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._timeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._timePickerParent">
            <summary>
            BackingField of TimePickerParent.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">UpDownBase whose Value changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.CultureProperty">
            <summary>
            Identifies the Culture dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnCulturePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CultureProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Culture.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnCultureChanged(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Called when the culture changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.TimeGlobalizationInfoProperty">
            <summary>
            Identifies the TimeGlobalizationInfo dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnTimeGlobalizationInfoPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeGlobalizationInfoProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeGlobalizationInfo.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnTimeGlobalizationInfoChanged(System.Windows.Controls.TimeGlobalizationInfo,System.Windows.Controls.TimeGlobalizationInfo)">
            <summary>
            Called when the time globalization info changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._actualTimeGlobalizationInfo">
            <summary>
            BackingField for ActualTimeGlobalizationInfo.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.FormatProperty">
            <summary>
            Identifies the Format dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            FormatProperty property changed handler.
            </summary>
            <param name="d">TimePickerPopup that changed its Format.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnFormatChanged(System.Windows.Controls.ITimeFormat,System.Windows.Controls.ITimeFormat)">
            <summary>
            Called when display format changed.
            </summary>
            <param name="oldValue">The old format.</param>
            <param name="newValue">The new format.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._actualFormat">
            <summary>
            BackingField for ActualFormat.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupSecondsIntervalProperty">
            <summary>
            Identifies the PopupSecondsInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupSecondsIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupSecondsIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupSecondsInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupSecondsIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup seconds interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupMinutesIntervalProperty">
            <summary>
            Identifies the PopupMinutesInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupMinutesIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupMinutesIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupMinutesInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupMinutesIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup minutes interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupTimeSelectionModeProperty">
            <summary>
            Identifies the PopupTimeSelectionMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupTimeSelectionModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupTimeSelectionModeProperty property changed handler.
            </summary>
            <param name="d">TimePickerPopup that changed its PopupTimeSelectionMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupTimeSelectionModeChanged(System.Windows.Controls.PopupTimeSelectionMode,System.Windows.Controls.PopupTimeSelectionMode)">
            <summary>
            Called when the time selection mode is changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimePickerPopup"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TimePickerPopup control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.DoCancel">
            <summary>
            Raises the Cancel event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.DoCommit">
            <summary>
            Raises the Commit event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnOpened">
            <summary>
            Called when the TimePicker control has opened this popup.
            </summary>
            <remarks>Called before the TimePicker reacts to value changes.
            This is done so that the Popup can 'snap' to a specific value without
            changing the selected value in the TimePicker.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnClosed">
            <summary>
            Called when the TimePicker control has closed this popup.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual states.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.GetValidPopupTimeSelectionModes">
            <summary>
            Gets the valid popup time selection modes.
            </summary>
            <returns>An array of PopupTimeSelectionModes that are supported by
            the Popup.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnCreateAutomationPeer">
            <summary>
            Returns an AutomationPeer for use by the Silverlight 
            automation infrastructure.
            </summary>
            <returns>An AutomationPeer for the Popup object.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.CreateAutomationPeer">
            <summary>
            Creates the automation peer.
            </summary>
            <returns>An AutomationPeer for this instance.</returns>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.TimePickerParent">
            <summary>
            Gets or sets the container for this Popup.
            </summary>
            <value>The TimePicker that contains this Popup.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Value">
            <summary>
            Gets or sets the currently selected time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Minimum">
            <summary>
            Gets or sets the Minimum time considered valid by the control.
            </summary>
            <remarks>Setting the Minimum property will be used to prevent users 
            from choosing values out of range in the TimePickerPopup.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Maximum">
            <summary>
            Gets or sets the Maximum time considered valid by the control.
            </summary>
            <remarks>Setting the Maximum property will be used to prevent users 
            from choosing values out of range in the TimePickerPopup.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Culture">
            <summary>
            Gets or sets the culture that will be used by the control for 
            time formatting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.ActualCulture">
            <summary>
            Gets the actual culture used by the control for formatting and parsing.
            </summary>
            <value>The actual culture.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.TimeGlobalizationInfo">
            <summary>
            Gets or sets the strategy object that determines how the control 
            interacts with DateTime and CultureInfo.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.ActualTimeGlobalizationInfo">
            <summary>
            Gets the actual TimeGlobalizationInfo used by the control.
            </summary>
            <remarks>If TimeGlobalizationInfo is not set, will return 
            default TimeGlobalizationInfo instance.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Format">
            <summary>
            Gets or sets the Format used by the control. 
            From XAML Use either "Short", "Long" or a custom format. 
            Custom formats can only contain "H", "h", "m", "s" or "t". 
            For example: use 'hh:mm:ss' is used to format time as "13:45:30".
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.ActualFormat">
            <summary>
            Gets the actual format that will be used to display Time 
            in the TimePickerPopup. If no format is specified, ShortTimeFormat 
            is used.
            </summary>
            <value>The actual display format.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.PopupSecondsInterval">
            <summary>
            Gets or sets the interval of seconds that can be
            picked in a popup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.PopupMinutesInterval">
            <summary>
            Gets or sets the interval of minutes that can be
            picked in a popup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.PopupTimeSelectionMode">
            <summary>
            Gets or sets the whether the TimePickerPopup supports selecting 
            designators and/or seconds.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.ValueChanging">
            <summary>
            Occurs when Value property is changing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.ValueChanged">
            <summary>
            Occurs when Value property has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.Commit">
            <summary>
            Occurs when a selected item is committed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.Cancel">
            <summary>
            Occurs when a selection has been canceled.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#ITimeInput#Value">
            <summary>
            Gets or sets the Value property.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#ITimeInput#Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#ITimeInput#Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.ListBoxPartName">
            <summary>
            The name of the ListBox TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup._listBoxPart">
            <summary>
            BackingField for ListBoxPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup._isValueChangeCausedBySelection">
            <summary>
            Determines whether the value changed because SelectedItem in the
            ListBox was changed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.ListBoxStyleProperty">
            <summary>
            Identifies the ListBoxStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnListBoxStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ListBoxStyleProperty property changed handler.
            </summary>
            <param name="d">ListTimePickerPopup that changed its ListBoxStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.ListBoxItemStyleProperty">
            <summary>
            Identifies the ListBoxItemStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnListBoxItemStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ListBoxItemStyleProperty property changed handler.
            </summary>
            <param name="d">ListTimePickerPopup that changed its ListBoxItemStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup._allowWritingTimeItemsSelection">
            <summary>
            Indicates whether it is allowed to set the TimeItemsSelection property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.TimeItemsSelectionProperty">
            <summary>
            Identifies the TimeItemsSelection dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnTimeItemsSelectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeItemsSelectionProperty property changed handler.
            </summary>
            <param name="d">ListTimePickerPopup that changed its TimeItemsSelection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ListTimePickerPopup"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ListTimePickerPopup control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnCultureChanged(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Called when the culture changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnFormatChanged(System.Windows.Controls.ITimeFormat,System.Windows.Controls.ITimeFormat)">
            <summary>
            Called when format changed.
            </summary>
            <param name="oldValue">The old format.</param>
            <param name="newValue">The new format.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnPopupMinutesIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup minutes interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnPopupSecondsIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup seconds interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnPopupTimeSelectionModeChanged(System.Windows.Controls.PopupTimeSelectionMode,System.Windows.Controls.PopupTimeSelectionMode)">
            <summary>
            Called when the time selection mode is changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.RegenerateTimeItems">
            <summary>
            Regenerates the time items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.SelectValue">
            <summary>
            Select a value based on the current value. This will 'snap' the 
            Value to the closest possible Time based on the interval.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.ScrollToSelectedValue">
            <summary>
            Scrolls to a value in the list, or closest.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.TimeItemsSelectionPropertyChanged(System.ComponentModel.INotifyPropertyChanged,System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Called when the TimeItems object is set.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.TimeItemsPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called by any property change on the TimeItems object.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnOpened">
            <summary>
            Called when TimePicker opened the popup.
            </summary>
            <remarks>Called before the TimePicker reacts to value changes.
            This is done so that the Popup can 'snap' to a specific value without
            changing the selected value in the TimePicker.</remarks>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.ItemSelectedByMouse(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseLeftButtonUp event of the ListBoxPart control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.GetValidPopupTimeSelectionModes">
            <summary>
            Gets the valid popup time selection modes.
            </summary>
            <returns>
            An array of PopupTimeSelectionModes that are supported by
            the Popup.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.CreateAutomationPeer">
            <summary>
            Creates the automation peer.
            </summary>
            <returns>The ListTimePickerPopupAutomationPeer for this instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.RaiseAutomationPeerSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Raises the automation peer selection changed event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.SelectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.ListBoxPart">
            <summary>
            Gets the ListBox part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.ListBoxStyle">
            <summary>
            Gets or sets the Style applied to the ListBox portion the 
            ListTimePickerPopup control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.ListBoxItemStyle">
            <summary>
            Gets or sets the Style applied to the ListBoxItems in the 
            ListTimePickerPopup control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.TimeItemsSelection">
            <summary>
            Gets the collection of times used in the ListBox portion of the 
            ListTimePickerPopup control.
            </summary>
            <value>The time items selection.</value>
        </member>
        <member name="T:System.Windows.Controls.RangeTimePickerPopup">
            <summary>
            Represents a time picker popup that allows choosing time through 3 
            sliders: Hours, Minutes and seconds.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.HoursSliderPartName">
            <summary>
            The HoursSliderPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.MinutesSliderPartName">
            <summary>
            The MinutesSliderPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.SecondsSliderPartName">
            <summary>
            The SecondsSliderPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.HoursContainerPartName">
            <summary>
            The HoursLabelsPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.MinutesContainerPartName">
            <summary>
            The MinutesLabelsPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.SecondsContainerPartName">
            <summary>
            The SecondsLabelsPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.CommitButtonPartName">
            <summary>
            The name of the CommitButton TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.CancelButtonPartName">
            <summary>
            The name of the CancelButton TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._secondsSlider">
            <summary>
            BackingField for the SecondsSlider.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._minutesSlider">
            <summary>
            BackingField for the MinutesSlider.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._hoursSlider">
            <summary>
            BackingField for the HoursSlider.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._cancelButtonPart">
            <summary>
            BackingField for CancelButtonPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._commitButtonPart">
            <summary>
            BackingField for CommitButtonPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._isOpenedByContainer">
            <summary>
            Is set when opened or closed by a container.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._ignoreSliderChange">
            <summary>
            Determines whether the control should ignore the changes in its 
            sliders.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.SliderStyleProperty">
            <summary>
            Identifies the SliderStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnSliderStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SliderStyleProperty property changed handler.
            </summary>
            <param name="d">RangeTimePickerPopup that changed its SliderStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.TimeButtonStyleProperty">
            <summary>
            Identifies the TimeButtonStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnTimeButtonStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeButtonStyleProperty property changed handler.
            </summary>
            <param name="d">RangeTimePickerPopup that changed its TimeButtonStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.RangeTimePickerPopup"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnApplyTemplate">
            <summary>
            Builds the visual tree for the RangeTimePickerPopup control when a 
            new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SliderSizeChange(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Called when a slider changes size.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SecondsChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Reacts to a change in the Seconds Slider.
            </summary>
            <param name="sender">The Slider that changed its value.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.MinutesChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Reacts to a change in the Minutes Slider.
            </summary>
            <param name="sender">The Slider that changed its value.</param>
            <param name="e">The instance containing the event data.</param>        
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.HoursChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Reacts to a change in the Hours Slider.
            </summary>
            <param name="sender">The Slider that changed its value.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnOpened">
            <summary>
            Called when the TimePicker control has opened this popup.
            </summary>
            <remarks>Called before the TimePicker reacts to value changes.
            This is done so that the Popup can 'snap' to a specific value without
            changing the selected value in the TimePicker.</remarks>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnClosed">
            <summary>
            Called when the TimePicker control has closed this popup.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnCommit(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called by the commit button.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnCancel(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called by the cancel button.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetValueFromSliders">
            <summary>
            Calculates the value based on the sliders.
            </summary>
            <returns>The DateTime as represented by the current values in the 
            Sliders.</returns>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SetSlidersToValue(System.DateTime)">
            <summary>
            Sets the sliders to value.
            </summary>
            <param name="value">The DateTime that needs to be reflected by
            the three sliders.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GenerateLabels">
            <summary>
            Generates the labels.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SetEnabledStatusOnLabels">
            <summary>
            Sets the enabled status on the labels.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.LayoutLabels">
            <summary>
            Arranges the time labels on the RangeTimePickerPopup control.
            </summary>
            <remarks>Uses a canvas to layout labels vertically.</remarks>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnLabelClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a label is clicked.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetCoercedValue(System.DateTime)">
            <summary>
            Gets the value after Minimum and Maximum coercion.
            </summary>
            <param name="time">The input.</param>
            <returns>Time between Minimum and Maximum.</returns>
            <remarks>Done to avoid coercion in containing controls.</remarks>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetSnappedValue(System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the coerced value, using interval and a minimum and maximum.
            </summary>
            <param name="value">The value that will be snapped.</param>
            <param name="minimum">The minimum the value may be.</param>
            <param name="maximum">The maximum the value may be.</param>
            <param name="interval">The interval to which the value gets snapped.</param>
            <returns>A value that is within range and snapped to an interval.</returns>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.CreateLabelElement(System.String,System.TimeSpan)">
            <summary>
            Creates the element for a label.
            </summary>
            <param name="text">The text that is set as content.</param>
            <param name="timespan">The TimeSpan that is represented by the Button.</param>
            <returns>A Button representing the label.</returns>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetValidPopupTimeSelectionModes">
            <summary>
            Gets the valid popup time selection modes.
            </summary>
            <returns>
            An array of PopupTimeSelectionModes that are supported by
            the Popup.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.CreateAutomationPeer">
            <summary>
            Creates the automation peer.
            </summary>
            <returns>The RangeTimePickerPopupAutomationPeer for this instance.</returns>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.SecondsSlider">
            <summary>
            Gets or sets the seconds slider Part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.MinutesSlider">
            <summary>
            Gets or sets the minutes slider.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.HoursSlider">
            <summary>
            Gets or sets the HoursSlider.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.HoursContainer">
            <summary>
            Gets or sets the hours labels.
            </summary>
            <value>The hours labels.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.MinutesContainer">
            <summary>
            Gets or sets the minute labels.
            </summary>
            <value>The minute labels.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.SecondsContainer">
            <summary>
            Gets or sets the second labels.
            </summary>
            <value>The second labels.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.CancelButtonPart">
            <summary>
            Gets or sets the cancel button part.
            </summary>
            <value>The cancel button part.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.CommitButtonPart">
            <summary>
            Gets or sets the commit button part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.IsCurrentlyOpen">
            <summary>
            Gets a value indicating whether this instance is currently open.
            </summary>
            <value><c>True</c> if this instance is currently open; 
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.SliderStyle">
            <summary>
            Gets or sets the Style applied to the sliders in the 
            RangeTimePickerPopup control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.TimeButtonStyle">
            <summary>
            Gets or sets the Style applied to the buttons that represent
            hours, minutes and seconds.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TimePickerPopupTemplate">
            <summary>
            Describes the template used to instantiate a Popup for TimePicker.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.PopupTimeSelectionMode">
            <summary>
            Determines the granularity of time selection
            by a popup. Hours and minutes are always used.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.PopupTimeSelectionMode.AllowSecondsSelection">
            <summary>
            Hours, Minutes and Seconds.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PopupTimeSelectionMode.HoursAndMinutesOnly">
            <summary>
            Hours and Minutes.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.CustomTimeFormat">
            <summary>
            Represents a single time format used for parsing and formatting.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ITimeFormat">
            <summary>
            Defines time formats used for formatting and parsing DateTime values.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ITimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>A format to use during display of a DateTime.</returns>
        </member>
        <member name="M:System.Windows.Controls.ITimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the formats to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>An array of formats to be used during parsing.</returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.CustomTimeFormat"/> class.
            </summary>
            <param name="format">The format that is used to parse or display
            a String or DateTime.</param>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.CustomTimeFormat"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>
            A format to use during display of a DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>
            An array of formats to be used during parsing.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is 
            equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare 
            with the current <see cref="T:System.Object"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal 
            to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.op_Equality(System.Windows.Controls.CustomTimeFormat,System.Windows.Controls.CustomTimeFormat)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.op_Inequality(System.Windows.Controls.CustomTimeFormat,System.Windows.Controls.CustomTimeFormat)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.CustomTimeFormat.Format">
            <summary>
            Gets or sets the custom format that is used to parse or display
            a String or DateTime.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.LongTimeFormat">
            <summary>
            Represents the long time format used for parsing and formatting.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>
            A format to use during display of a DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the formats to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>
            An array of formats to be used during parsing.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is 
            equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare 
            with the current <see cref="T:System.Object"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal 
            to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.op_Equality(System.Windows.Controls.LongTimeFormat,System.Windows.Controls.LongTimeFormat)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.op_Inequality(System.Windows.Controls.LongTimeFormat,System.Windows.Controls.LongTimeFormat)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.ShortTimeFormat">
            <summary>
            Represents the short time format used for parsing and formatting.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>
            A format to use during display of a DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the formats to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>
            An array of formats to be used during parsing.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is 
            equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare 
            with the current <see cref="T:System.Object"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal 
            to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.op_Equality(System.Windows.Controls.ShortTimeFormat,System.Windows.Controls.ShortTimeFormat)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.op_Inequality(System.Windows.Controls.ShortTimeFormat,System.Windows.Controls.ShortTimeFormat)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.TimeFormatConverter">
            <summary>
            Converts from a string value to an ITimeFormat instance. Converts "Short" 
            to ShortTimeFormat, "Long" to LongTimeFormat and any other strings to 
            CustomTimeFormat. 
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert from the specified type 
            descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="sourceType">Type of the source.</param>
            <returns>
            	<c>True</c> if this instance can convert from the specified 
            type descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert to the specified type 
            descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>
            	<c>True</c> if this instance can convert to the specified type 
            descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts instances of type string to an instance of type ITimeFormat.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert.</param>
            <param name="source">
            The string that is converted.
            </param>
            <returns>
            An instance of ITimeFormat that is the value of the conversion.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts an known instance of type ITimeFormat to a string.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert.</param>
            <param name="value">
            The value that is being converted to a specified type.
            </param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.TimeGlobalizationInfo">
            <summary>
            Strategy object that determines how controls interact with DateTime and 
            CultureInfo.
            </summary>
            <remarks>TimeInput supports only the following formatting characters:
            'h', 'm', 's', 'H', 't'. All other characters are filtered out:
            'd', 'f', 'F', 'g', 'K', 'M', 'y', 'z'.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimeGlobalizationInfo.TimeChars">
            <summary>
            The characters that are allowed inside a format.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetTransformedFormat(System.String)">
            <summary>
            Transforms a format to a format that only allows the characters
            h, m, s, t, H and the defined TimeSeparators (: and .).
            Also takes into account the rule that a single TimeCharacter should
            be followed by a space.
            </summary>
            <param name="format">The format that needs to be transformed.</param>
            <returns>A format containing only the expected characters.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.MapDigitToCharacter(System.Int32)">
            <summary>
            Returns the global representation of each integer formatted 
            by the TimeGlobalizationInfo.
            </summary>
            <param name="input">Character that will be mapped to a different
            character.</param>
            <returns>The global version of a character that represents the input.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.MapCharacterToDigit(System.Char)">
            <summary>
            Returns the European number character of each global representation 
            parsed by the TimeGlobalizationInfo.
            </summary>
            <param name="input">The global version of the character that needs 
            to be mapped to a regular character.</param>
            <returns>The character that represents the global version of a character.</returns>
            <remarks>All characters pass through this method (whitespaces and
            TimeDesignators). Return the input character if no logical mapping
            could be made.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetActualTimeParsers(System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})">
            <summary>
            Gets the actual TimeParsers that will be used for parsing.
            </summary>
            <param name="parsers">The parsers that are currently used by parent.</param>
            <returns>A new collection of parsers that represent the parsers
            this strategy object will use.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.FormatTime(System.Nullable{System.DateTime},System.Windows.Controls.ITimeFormat,System.Char[])">
            <summary>
            Formats the specified DateTime to a time string representation.
            </summary>
            <param name="value">The DateTime that should be formatted.</param>
            <param name="timeFormat">The time format used to describe how value
            should be formatted.</param>
            <param name="timeCharacters">The allowed characters in the format. 
            Leave empty to indicate that all characters are allowed. See remarks.</param>
            <returns>
            A string that represents the time part of a DateTime.
            </returns>
            <remarks>The TimeFormat will contain TimeCharacters in a certain 
            order, like hh:mm:ss. By passing specific TimeCharacters, these
            will get filtered and the method only returns part of the formatted
            string. Example: pass 'h', 't', 'H' to get back 4 AM, if the culture
            was set to en-US.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.ParseTime(System.String,System.Windows.Controls.ITimeFormat,System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})">
            <summary>
            Parses a string into a DateTime using the specified ITimeFormat instance 
            and TimeParsers.
            </summary>
            <param name="mappedText">The text that was entered by the user.</param>
            <param name="timeFormat">The TimeFormat instance used to supply
            formats.</param>
            <param name="timeParsers">The time parsers.</param>
            <returns>
            A DateTime with a correctly set time part.
            </returns>
            <remarks>The date part of the DateTime is irrelevant and will be
            overwritten by the current date.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.TryParseTime(System.String,System.Windows.Controls.ITimeFormat,System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser},System.Nullable{System.DateTime}@)">
            <summary>
            Parses a string into a DateTime using the specified ITimeFormat instance 
            and TimeParsers and returns a value that indicates whether the conversion 
            succeeded.
            </summary>
            <param name="mappedText">The text that was entered by the user.</param>
            <param name="timeFormat">The TimeFormat instance used to supply
            formats.</param>
            <param name="timeParsers">The time parsers.</param>
            <param name="result">A DateTime with a correctly set time part.</param>
            <returns>
            True, if the time was parsed correctly, false if the time was not 
            parsed.
            </returns>
            <remarks>The date part of the DateTime is irrelevant and will be
            overwritten by the current date.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetTimeUnitAtTextPosition(System.String,System.Int32,System.Windows.Controls.ITimeFormat)">
            <summary>
            Gets the time unit that is represented by a text position.
            </summary>
            <param name="text">The text that represents a DateTime.</param>
            <param name="textPosition">The location in the text.</param>
            <param name="timeFormat">The time format describe how the text 
            can be parsed to a DateTime.</param>
            <returns>
            The TimeSpan that is represented by the character at a
            specific caret position.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetTextPositionForTimeUnit(System.String,System.TimeSpan,System.Windows.Controls.ITimeFormat)">
            <summary>
            Gets the position for a time unit in a string that can be parsed by 
            the specified ITimeFormat.
            </summary>
            <param name="text">The text that represents a DateTime.</param>
            <param name="timeSpan">The time span that is searched for.</param>
            <param name="timeFormat">The time format that describes how this text can be
            parsed to a DateTime.</param>
            <returns>
            The position in the text that corresponds to the TimeSpan or
            -1 if none was found.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.OnIncrement(System.DateTime,System.TimeSpan)">
            <summary>
            Performs addition of a date time and a time span in a global context.
            </summary>
            <param name="value">The value.</param>
            <param name="timeSpan">The time span.</param>
            <returns>The DateTime after incrementing by TimeSpan.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.OnDecrement(System.DateTime,System.TimeSpan)">
            <summary>
            Subtracts a time span from a date time in a global context.
            </summary>
            <param name="value">The value.</param>
            <param name="timeSpan">The time span.</param>
            <returns>The DateTime after decrementing by TimeSpan.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetDesignatorTextPositionStart(System.String)">
            <summary>
            Gets the caret position at the start of the designator.
            </summary>
            <param name="text">The text that might include a designator.</param>
            <returns>Caret position for the end of the designator,
            or -1 if none found.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetDesignatorTextPositionEnd(System.String,System.Int32)">
            <summary>
            Gets the caret position at the end of the designator.
            </summary>
            <param name="text">The text that might include a designator.</param>
            <param name="designatorStartIndex">Start index of the designator.</param>
            <returns>
            Caret position for the end of the designator,
            or -1 if none found.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.Culture">
            <summary>
            Gets or sets the culture used by the owning TimeInput control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.ActualCulture">
            <summary>
            Gets the actual culture used by the TimeGlobalizationInfo for formatting 
            and parsing.
            </summary>
            <value>The actual culture.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.TimeSeparators">
            <summary>
            Gets the characters that may be used to separate components of time,
            that is, hours, minutes and seconds.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.AMDesignator">
            <summary>
            Gets the string designator for hours that are "ante meridiem" 
            (before noon).
            </summary>
            <value>The AM designator.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.PMDesignator">
            <summary>
            Gets the string designator for hours that are "post meridiem" 
            (after noon).
            </summary>
            <value>The PM designator.</value>
        </member>
        <member name="T:System.Windows.Controls.Picker">
            <summary>
            Base class for all controls that have popup functionality.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Picker.ElementPopupName">
            <summary>
            Name constant for Popup.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker.ElementDropDownToggleName">
            <summary>
            Name constant for DropDownToggle.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._dropDownPopup">
            <summary>
            BackingField for PopupPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._dropDownToggleButton">
            <summary>
            BackingField for DropDownTogglePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker.IsDropDownOpenProperty">
            <summary>
            Identifies the IsDropDownOpen dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnIsDropDownOpenPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsDropDownOpenProperty property changed handler.
            </summary>
            <param name="d">Picker that changed its IsDropDownOpen.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Picker.PopupButtonModeProperty">
            <summary>
            Identifies the PopupButtonMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnPopupButtonModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupButtonModeProperty property changed handler.
            </summary>
            <param name="d">Picker that changed its PopupButtonMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Picker.MaxDropDownHeightProperty">
            <summary>
            Identifies the MaxDropDownHeight dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMaxDropDownHeightPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaxDropDownHeightProperty property changed handler.
            </summary>
            <param name="d">Picker that changed its MaxDropDownHeight.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupChild">
            <summary>
            BackingField for PopupChild.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._outsidePopupCanvas">
            <summary>
            Gets or sets the expansive area outside of the popup.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupChildCanvas">
            <summary>
            Gets or sets the canvas for the popup child.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._ignorePropertyChange">
            <summary>
            Gets or sets a value indicating whether to ignore calling a pending 
            change handlers. 
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupClosedVisualState">
            <summary>
            Gets or sets a value indicating whether a visual popup state is 
            being used in the current template for the Closed state. Setting 
            this value to true will delay the actual setting of Popup.IsOpen 
            to false until after the visual state's transition for Closed is 
            complete.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupHasOpened">
            <summary>
            A value indicating whether the popup has been opened at least once.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.Picker"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnApplyTemplate">
            <summary>
            Builds the visual tree for the Picker control when a new template is 
            applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.GetSelectedValue">
            <summary>
            Gets the selected value represented in the control.
            </summary>
            <returns>The value that is picked.</returns>
        </member>
        <member name="M:System.Windows.Controls.Picker.ArrangePopup">
            <summary>
            Arrange the drop down popup.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OpenDropDown(System.Boolean,System.Boolean)">
            <summary>
            Private method that directly opens the popup, checks the expander 
            button, and then fires the Opened event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.CloseDropDown(System.Boolean,System.Boolean)">
            <summary>
            Private method that directly closes the popup, flips the Checked 
            value, and then fires the Closed event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.ToggleButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Opens or closes the popup if reacting to button press.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnPopupClosedStateChanged(System.Object,System.Windows.VisualStateChangedEventArgs)">
            <summary>
            Actually closes the popup after the VSM state animation completes.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OutsidePopupMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The mouse has clicked outside of the popup.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.ControlIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle the change of the IsEnabled property.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMaxDropDownHeightChanged(System.Double)">
            <summary>
            Handles MaxDropDownHeightChanged by re-arranging and updating the 
            popup arrangement.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The popup child has received focus.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The popup child has lost focus.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildMouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The popup child has had the mouse enter its bounds.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildMouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The mouse has left the popup child's bounds.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            The size of the popup child has changed.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownOpening(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownOpening event.
            </summary>
            <param name="e">
            Provides any observers the opportunity to cancel the operation and 
            halt opening the drop down.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownOpened(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownOpened event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownClosing(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownClosing event.
            </summary>
            <param name="e">
            Provides any observers the opportunity to cancel the operation 
            and halt closing the drop down.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownClosed(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownClosed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.FocusChanged(System.Boolean)">
            <summary>
            Handles the FocusChanged event.
            </summary>
            <param name="hasFocus">A value indicating whether the control 
            currently has the focus.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.HasFocus">
            <summary>
            Checks to see if the control has focus currently.
            </summary>
            <returns>Returns a value indicating whether the control or its popup
            have focus.</returns>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonUp event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonDown event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Picker.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual state of the button.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.Picker.DropDownPopup">
            <summary>
            Gets or sets the popup part.
            </summary>
            <value>The popup part.</value>
        </member>
        <member name="P:System.Windows.Controls.Picker.DropDownToggleButton">
            <summary>
            Gets or sets the drop down toggle part.
            </summary>
            <value>The drop down toggle part.</value>
        </member>
        <member name="P:System.Windows.Controls.Picker.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the drop-down portion 
            of the control is open.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.PopupButtonMode">
            <summary>
            Gets or sets the button event that causes the popup portion of the 
            Picker control to open.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.MaxDropDownHeight">
            <summary>
            Gets or sets the maximum height of the drop-down portion of the 
            Picker control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.PopupChild">
            <summary>
            Gets the element shown in the drop down portion of the Picker control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality. Making it internal for subclass access.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownOpening">
            <summary>
            Occurs when the value of the IsDropDownOpen property is changing from 
            false to true.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownOpened">
            <summary>
            Occurs when the value of the IsDropDownOpen property has changed from 
            false to true and the drop-down is open.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownClosing">
            <summary>
            Occurs when the IsDropDownOpen property is changing from true to false.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownClosed">
            <summary>
            Occurs when the IsDropDownOpen property was changed from true to false 
            and the drop-down is open.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TimeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimeCoercionHelper._timeInputControl">
            <summary>
            The TimeInput control that needs to be coerced.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.#ctor(System.Windows.Controls.ITimeInput)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeCoercionHelper"/> class.
            </summary>
            <param name="timeInput">The time input that this helper will coerce.</param>
            <remarks>Lifetime of this helper class is determined by lifetime
            of control it is coercing.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.ProcessMinimumChange(System.Nullable{System.DateTime})">
            <summary>
            Processes the minimum value being set.
            </summary>
            <param name="newMinimum">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.ProcessMaximumChange(System.Nullable{System.DateTime})">
            <summary>
            Processes the maximum value being set.
            </summary>
            <param name="newMaximum">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.CoerceValue(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Coerces the value.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns>
            True if no coercion was needed and the value will not be
            modified, false if the coercion logic will set a different value.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.CoerceValueOnRangeMove(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Coerces the value.
            </summary>
            <param name="newMinimum">The new minimum.</param>
            <param name="newMaximum">The new maximum.</param>
            <returns>True if no coercion was needed and the value will not be
            modified, false if the coercion logic will set a different value.</returns>
        </member>
        <member name="T:System.Windows.Controls.TimeParser">
            <summary>
            Converts the specified string representation of a time to its DateTime 
            equivalent.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.TimeParser.TryParse(System.String,System.Globalization.CultureInfo,System.Nullable{System.DateTime}@)">
            <summary>
            Converts the specified string representation of a time to its DateTime 
            equivalent and returns a value that indicates whether the conversion 
            succeeded.
            </summary>
            <param name="text">The text that should be parsed.</param>
            <param name="culture">The culture being used.</param>
            <param name="result">The parsed DateTime.</param>
            <returns>True if the parse was successful, false if it was not.</returns>
        </member>
        <member name="T:System.Windows.Controls.TimeParserCollection">
            <summary>
            Represents a collection of TimeParser objects.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.TimeParserCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeParserCollection"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeParserCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeParserCollection"/> class.
            </summary>
            <param name="parsers">A sequence of TimeParser objects that will
            be copied into this collection.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeParserCollection.TryParse(System.String,System.Globalization.CultureInfo,System.Nullable{System.DateTime}@)">
            <summary>
            Tries to parse a string to a DateTime.
            </summary>
            <param name="text">The text that should be parsed.</param>
            <param name="culture">The culture being used.</param>
            <param name="result">The parsed DateTime.</param>
            <returns>True if the parse was successful, false if it was not.</returns>
        </member>
        <member name="T:System.Windows.Controls.CatchallTimeParser">
            <summary>
            TimeParser that will allow very loose time to be entered. It will try
            to parse the first two numbers as hours and the second two numbers as 
            minutes, and will not care about other characters, such as designators,
            separators or non-time related characters.
            If the first character is bigger than 2, it will parse only the first 
            character as an hour and will use the second two characters for minutes.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.CatchallTimeParser.exp">
            <summary>
            Expression used to parse.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CatchallTimeParser.TryParse(System.String,System.Globalization.CultureInfo,System.Nullable{System.DateTime}@)">
            <summary>
            Tries to parse a string to a DateTime.
            </summary>
            <param name="text">The text that should be parsed.</param>
            <param name="culture">The culture being used.</param>
            <param name="result">The parsed DateTime.</param>
            <returns>
            True if the parse was successful, false if it was not.
            </returns>
            <remarks>The parsing is culture insensitive. A user can type 8p to
            indicate 20:00:00, or 20.</remarks>
        </member>
        <member name="T:System.Windows.Controls.TimePicker">
            <summary>
            Represents a control that allows the user to select a time.
            </summary>
            <remarks>TimeInput supports only the following formatting characters:
            'h', 'm', 's', 'H', 't'. All other characters are filtered out:
            'd', 'f', 'F', 'g', 'K', 'M', 'y', 'z'.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.ElementTimeUpDownName">
            <summary>
            The name for the TimeUpDown element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeUpDownStyleName">
            <summary>
            The name for the TimeUpDownStyle element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.ElementPopupPlaceHolderPartName">
            <summary>
            The name for the PopupPlaceHolder element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._timeUpDownPart">
            <summary>
            BackingField for TimeUpDownPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._popupPlaceHolderPart">
            <summary>
            BackingField for PopupPlaceHolderPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._timeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._popupSessionValueCache">
            <summary>
            Cache of the value before we open a popup.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._isInitialized">
            <summary>
            Indicates that the control has finished initialization.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">UpDownBase whose Value changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeUpDownStyleProperty">
            <summary>
            Identifies the TimeUpDownStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnTimeUpDownStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeUpDownStyleProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its TimeUpDownStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.SpinnerStyleProperty">
            <summary>
            Identifies the SpinnerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnSpinnerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SpinnerStyleProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its SpinnerStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeParsersProperty">
            <summary>
            Identifies the TimeParsers dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnTimeParsersPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeParsersProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeParsers.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.FormatProperty">
            <summary>
            Identifies the Format dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            FormatProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its Format.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._actualFormat">
            <summary>
            BackingField for ActualFormat.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.CultureProperty">
            <summary>
            Identifies the Culture dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnCulturePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CultureProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Culture.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeGlobalizationInfoProperty">
            <summary>
            Identifies the TimeGlobalizationInfo dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnTimeGlobalizationInfoPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeGlobalizationInfoProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeGlobalizationInfo.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._actualTimeGlobalizationInfo">
            <summary>
            BackingField for ActualTimeGlobalizationInfo.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupProperty">
            <summary>
            Identifies the Popup dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its Popup.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupTemplateProperty">
            <summary>
            Identifies the PopupTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupTemplatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupTemplateProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupTemplate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._instantiatedPopupFromTemplate">
            <summary>
            BackingField for InstantiatedPopupFromTemplate.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupSecondsIntervalProperty">
            <summary>
            Identifies the PopupSecondsInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupSecondsIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupSecondsIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupSecondsInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._isPopupSecondsInitialized">
            <summary>
            Determines whether PopupSeconds has been changed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupMinutesIntervalProperty">
            <summary>
            Identifies the PopupMinutesInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupMinutesIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupMinutesIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupMinutesInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._isPopupMinutesInitialized">
            <summary>
            Determines whether PopupMinutes has been changed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupTimeSelectionModeProperty">
            <summary>
            Identifies the PopupTimeSelectionMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupTimeSelectionModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupTimeSelectionModeProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupTimeSelectionMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimePicker"/> 
            class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TimePicker control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.GetSelectedValue">
            <summary>
            Gets the selected time  represented in the control.
            </summary>
            <returns>The value that is picked.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.TimeUpDownValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Reacts to a change in value in TimeUpDown.
            </summary>
            <param name="sender">The TimeUpDown that changed its value.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.TimeUpDownParseError(System.Object,System.Windows.Controls.UpDownParseErrorEventArgs)">
            <summary>
            Raised when TimeUpDown raises this event.
            </summary>
            <param name="sender">The TimeUpDown instance raising this event.</param>
            <param name="e">The instance containing the event data.</param>
            <remarks>Here to make it easier to access
            these events.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.TimeUpDownParsing(System.Object,System.Windows.Controls.UpDownParsingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raised when TimeUpDown raises this event.
            </summary>
            <param name="sender">The TimeUpDown instance raising this event.</param>
            <param name="e">The instance containing the event data.</param>
            <remarks>Here to make it easier to access
            these events.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnDropDownOpened(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises an DropDownOpened event when the IsDropDownOpen property
            changed from false to true.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnDropDownClosed(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises an DropDownClosed event when the IsDropDownOpen property
            changed from true to false.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PopupValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Reacts to a Value change in a popup.
            </summary>
            <param name="sender">The Popup that raised a ValueChange.</param>
            <param name="e">The  instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PopupCommitted(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The Popup has been committed. Will close the popup.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PopupCanceled(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The Popup has been canceled. Will close the popup,
            and set the value back to its initial value.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.RegisterPopup(System.Windows.Controls.TimePickerPopup)">
            <summary>
            Called when a new Popup is set.
            </summary>
            <param name="popup">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.UnregisterPopup(System.Windows.Controls.TimePickerPopup)">
            <summary>
            Unregisters the popup.
            </summary>
            <param name="popup">The old value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.InstantiatePopupFromTemplate">
            <summary>
            Instantiates the template.
            </summary>
            <remarks>Will only use template if Popup is not set.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PropagateNewValue">
            <summary>
            Propagates the new value to components that are part of
            our template.
            </summary>
            <remarks>Workaround for SL2 inability to do twoway 
            templatebinding. Should remove in SL3.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnCreateAutomationPeer">
            <summary>
            Returns a PickerAutomationPeer for use by the Silverlight 
            automation infrastructure.
            </summary>
            <returns>A PickerAutomationPeer for the Picker object.</returns>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeUpDownPart">
            <summary>
            Gets or sets the time up down part.
            </summary>
            <value>The time up down part.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupPlaceHolderPart">
            <summary>
            Gets or sets the popup place holder part.
            </summary>
            <remarks>This is the ContentControl that is used to display
            Popups.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Value">
            <summary>
            Gets or sets the currently selected time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Minimum">
            <summary>
            Gets or sets the minimum time considered valid by the control.
            </summary>
            <remarks>Setting the minimum property is applicable for the following 
            features: Selecting a value through a popup, Parsing a new value from 
            the textbox, spinning a new value and programmatically specifying a value.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Maximum">
            <summary>
            Gets or sets the maximum time considered valid by the control.
            </summary>
            <remarks>Setting the Maximum property is applicable for the following 
            features: Selecting a value through a popup, Parsing a new value 
            from the textbox, spinning a new value and programmatically specifying 
            a value. </remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeUpDownStyle">
            <summary>
            Gets or sets the Style applied to the TimeUpDown portion of the TimePicker 
            control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.SpinnerStyle">
            <summary>
            Gets or sets the Style that is applied to the spinner.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeParsers">
            <summary>
            Gets or sets a collection of TimeParsers that are used when parsing 
            text to time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualTimeParsers">
            <summary>
            Gets the actual TimeParsers that will be used for parsing by the control.
            </summary>
            <remarks>Includes the TimeParsers introduced in the TimeGlobalizationInfo.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Format">
            <summary>
            Gets or sets the Format used by the control. From XAML Use either 
            "Short", "Long" or a custom format. 
            Custom formats can only contain "H", "h", "m", "s" or "t". 
            For example: use 'hh:mm:ss' is used to format time as "13:45:30".
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualFormat">
            <summary>
            Gets the actual format that will be used to display Time in the 
            TimePicker. If no format is specified, ShortTimeFormat is used.
            </summary>
            <value>The actual display format.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Culture">
            <summary>
            Gets or sets the culture that will be used by the control for 
            parsing and formatting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualCulture">
            <summary>
            Gets the actual culture used by the control for formatting and parsing.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeGlobalizationInfo">
            <summary>
            Gets or sets the strategy object that determines how the control 
            interacts with DateTime and CultureInfo. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualTimeGlobalizationInfo">
            <summary>
            Gets the actual TimeGlobalization info used by the control.
            </summary>
            <remarks>If TimeGlobalizationInfo is not set, will return 
            default TimeGlobalizationInfo instance.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualTimePickerPopup">
            <summary>
            Gets the TimePickerPopup that is used by the TimePicker. This
            can be either a popup created from the PopupTemplate, or a popup
            set directly to the Popup property. When both are set, the Popup
            property will win.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Popup">
            <summary>
            Gets or sets the TimePickerPopup that will be shown to the user by the 
            TimePicker control. This property may not be styled. To style a 
            TimePicker with a Popup, please use the PopupTemplate property.
            When both PopupTemplate and Popup are set, Popup will be used.
            </summary>
            <remark>This property might be null, since a template can be used.</remark>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupTemplate">
            <summary>
            Gets or sets the template used as Popup. A Popup can also be set
            directly on the Popup property. When both PopupTemplate and Popup
            are set, Popup will be used. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupSecondsInterval">
            <summary>
            Gets or sets the seconds interval between time values allowed by 
            the TimePickerPopup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupMinutesInterval">
            <summary>
            Gets or sets the minutes interval between time values allowed by the 
            TimePickerPopup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupTimeSelectionMode">
            <summary>
            Gets or sets the whether the TimePickerPopup supports selecting 
            designators and/or seconds.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.ValueChanging">
            <summary>
            Occurs when Value property is changing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.ValueChanged">
            <summary>
            Occurs when Value property has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.Parsing">
            <summary>
            Occurs when a value is being parsed and allows custom parsing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.ParseError">
            <summary>
            Occurs when there is an error in parsing user input and allows adding parsing logic.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.System#Windows#Controls#ITimeInput#Value">
            <summary>
            Gets or sets the Value property.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.System#Windows#Controls#ITimeInput#Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.System#Windows#Controls#ITimeInput#Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="T:System.Windows.Controls.TimeTypeConverter">
            <summary>
            Allows time to be set from xaml.
            </summary>
            <QualityBand>Preview</QualityBand>
            <remarks>This converter is used by xaml and thus uses the 
            English formats.</remarks>
        </member>
        <member name="F:System.Windows.Controls.TimeTypeConverter._timeFormats">
            <summary>
            BackingField for the TimeFormats being used.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeTypeConverter._dateFormats">
            <summary>
            BackingField for the DateFormats being used.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert from 
            the specified type descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="sourceType">Type of the source.</param>
            <returns>
            	<c>True</c> if this instance can convert from the specified type 
            descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert to the specified 
            type descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>
            	<c>True</c> if this instance can convert to the specified type 
            descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts instances of other data types into instances of DateTime that
            represent a time.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert. This culture
            is not used during conversion, but a specific set of formats is used.</param>
            <param name="source">
            The string being converted to the DateTime.
            </param>
            <returns>
            A DateTime that is the value of the conversion.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a DateTime into a string.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert.</param>
            <param name="value">
            The value that is being converted to a specified type.
            </param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.TimeUpDown">
            <summary>
            Represents a control that uses a spinner and textbox to allow a user to 
            input time.
            </summary>
            <remarks>TimeInput supports only the following formatting characters:
            'h', 'm', 's', 'H', 't'. All other characters are filtered out:
            'd', 'f', 'F', 'g', 'K', 'M', 'y', 'z'.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintFormat">
            <summary>
            StringFormat used in the TimeHint.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.ElementTimeHintPopupName">
            <summary>
            The name for the TimeHint element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.GroupTimeHint">
            <summary>
            The group name "TimeHintStates".
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.GroupTimeParsingStates">
            <summary>
            The group name "ParsingStates".
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintOpenedUpStateName">
            <summary>
            The state name "TimeHintOpenedUp" indicates that the hint is being
            shown on the top of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintOpenedDownStateName">
            <summary>
            The state name "TimeHintOpenedDown" indicates that the hint is
            being shown at the bottom of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintClosedStateName">
            <summary>
            The state name "TimeHintClosed" indicates that no hint is being 
            shown.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.ValidTimeStateName">
            <summary>
            The state name "ValidTime" that indicates that currently the textbox
            text parses to a valid Time.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.InvalidTimeStateName">
            <summary>
            The state name "InvalidTime" that indicates that currently the textbox 
            text does not allow parsing.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.EmptyTimeStateName">
            <summary>
            The state name "EmptyTime" that indicates that currently the textbox
            text would parse to a Null.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._timeHintPopupPart">
            <summary>
            BackingField for TimeHintPopupPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._timeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._lastParsedText">
            <summary>
            The text that was last parsed. Used in comparisons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._timeHintExpandDirection">
            <summary>
            The direction in which the TimeHint will expand.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._isShowTimeHint">
            <summary>
            BackingField for IsShowTimeHint.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeParsersProperty">
            <summary>
            Identifies the TimeParsers dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTimeParsersPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeParsersProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeParsers.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.FormatProperty">
            <summary>
            Identifies the Format dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            FormatProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its Format.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._actualFormat">
            <summary>
            BackingField for ActualFormat.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.CultureProperty">
            <summary>
            Identifies the Culture dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnCulturePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CultureProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Culture.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeGlobalizationInfoProperty">
            <summary>
            Identifies the TimeGlobalizationInfo dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTimeGlobalizationInfoPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeGlobalizationInfoProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeGlobalizationInfo.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._actualTimeGlobalizationInfo">
            <summary>
            BackingField for ActualTimeGlobalizationInfo.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.IsCyclicProperty">
            <summary>
            Identifies the IsCyclic dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnIsCyclicPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsCyclicProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed its IsCyclic value.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintContentProperty">
            <summary>
            Identifies the TimeHintContent dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTimeHintContentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeHintContentProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeHintContent.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._timeHintDate">
            <summary>
            Represents the formatted DateTime that is used in the TimeHint hint.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._isIgnoreSelectionOfAllText">
            <summary>
            Indicates whether the control should not proceed with selecting all
            text.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._allowHintContentChange">
            <summary>
            BackingField for AllowHintContentChange.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeUpDown"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TimeUpDown control when a new
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Provides handling for the ValueChanging event.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.FormatValue">
            <summary>
            Renders the value property into the textbox text.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.SetValidSpinDirection">
            <summary>
            Sets the valid spin direction based on the position of the caret,
            the value and the minimum and maximum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.SelectionChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the SelectionChanged event from TextBox.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.InputChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Handles the TextChanged event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.TextChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.DetermineHint">
            <summary>
            Determines the value of the hint property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTimeHintMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the Left Mouse Button Down event of the TimeHint.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">Key event args.</param>
            <remarks>
            Only support up and down arrow keys.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonDown event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonUp event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.SelectAllText">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTextLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for Text template part's LostFocus event.
            We use this event to compare current TextBox.Text with cached previous
            value to decide whether user has typed in a new value.
            </summary>
            <param name="sender">The Text template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">True to use transitions when updating the visual state, false to
            snap directly to the new visual state.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnCreateAutomationPeer">
            <summary>
            When implemented in a derived class, returns class-specific 
            <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations 
            for the Silverlight automation infrastructure.
            </summary>
            <returns>
            The class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> 
            subclass to return.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.TimeHintPopupPart">
            <summary>
            Gets or sets the time hint popup part.
            </summary>
            <value>The time hint popup part.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.IsShowTimeHint">
            <summary>
            Gets or sets a value indicating whether this instance is showing a
            TimeHint visual.
            </summary>
            <value><c>True</c> if this instance is showing the TimeHint; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualMinimum">
            <summary>
            Gets the actual minimum. If a Minimum is set, use that, otherwise
            use the start of the day.
            </summary>        
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualMaximum">
            <summary>
            Gets the actual maximum. If a Maximum is set, use that, otherwise
            use the end of the day.
            </summary>
            <value>The actual maximum.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Value">
            <summary>
            Gets or sets the currently selected time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Minimum">
            <summary>
            Gets or sets the minimum time considered valid by the control.
            </summary>
            <remarks>Setting the minimum property is applicable for the following 
            features: Parsing a new value from the textbox, spinning a new value 
            and programmatically specifying a value.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Maximum">
            <summary>
            Gets or sets the maximum time considered valid by the control.
            </summary>
            <remarks>Setting the Maximum property is applicable for the following 
            features: Parsing a new value from the textbox, spinning a new value 
            and programmatically specifying a value. </remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.TimeParsers">
            <summary>
            Gets or sets a collection of TimeParsers that are used when parsing 
            text to time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualTimeParsers">
            <summary>
            Gets the actual TimeParsers that will be used for parsing by the control.
            </summary>
            <remarks>Includes the TimeParsers introduced in the TimeGlobalizationInfo.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Format">
            <summary>
            Gets or sets the Format used by the control. 
            From XAML Use either "Short", "Long" or a custom format. 
            Custom formats can only contain "H", "h", "m", "s" or "t". 
            For example: use 'hh:mm:ss' is used to format time as "13:45:30".
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualFormat">
            <summary>
            Gets the actual format that will be used to display Time  in the 
            TimeUpDown. If no format is specified, ShortTimeFormat is used.
            </summary>
            <value>The actual display format.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Culture">
            <summary>
            Gets or sets the culture that will be used by the control for 
            parsing and formatting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualCulture">
            <summary>
            Gets the actual culture used by the control for formatting and parsing.
            </summary>
            <value>The actual culture.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.TimeGlobalizationInfo">
            <summary>
            Gets or sets the strategy object that determines how the control 
            interacts with DateTime and CultureInfo.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualTimeGlobalizationInfo">
            <summary>
            Gets the actual TimeGlobalization info used by the control.
            </summary>
            <remarks>If TimeGlobalizationInfo is not set, will return 
            default TimeGlobalizationInfo instance.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.IsCyclic">
            <summary>
            Gets or sets a value indicating whether the TimeUpDown control will 
            cycle through values when trying to spin the first and last item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.TimeHintContent">
            <summary>
            Gets the text used to guide the user when entering time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.System#Windows#Controls#ITimeInput#Value">
            <summary>
            Gets or sets the Value property.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.System#Windows#Controls#ITimeInput#Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.System#Windows#Controls#ITimeInput#Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="T:System.Windows.Controls.UpDownParseErrorEventArgs">
            <summary>
            Provides data for the UpDownBase.ParseError event.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.UpDownParseErrorEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UpDownParseErrorEventArgs class.
            </summary>
            <param name="text">The text that caused the parsing error.</param>
            <param name="error">The exception thrown by ParseValue method.</param>
        </member>
        <member name="P:System.Windows.Controls.UpDownParseErrorEventArgs.Text">
            <summary>
            Gets the original string value that failed to parse.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownParseErrorEventArgs.Error">
            <summary>
            Gets the exception that was raised during the initial parsing 
            attempt.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownParseErrorEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event is handled.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.UpDownParsingEventArgs`1">
            <summary>
            Provides data for the UpDownBase.Parsing event.
            </summary>
            <typeparam name="T">Type of Value property.</typeparam>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.UpDownParsingEventArgs`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:System.Windows.Controls.UpDownParsingEventArgs`1"/> class.
            </summary>
            <param name="text">The text that will be parsed.</param>
        </member>
        <member name="P:System.Windows.Controls.UpDownParsingEventArgs`1.Text">
            <summary>
            Gets the original string value that will be parsed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownParsingEventArgs`1.Value">
            <summary>
            Gets or sets the value to be used.
            </summary>
            <value>The parsed value.</value>
        </member>
        <member name="P:System.Windows.Controls.UpDownParsingEventArgs`1.Handled">
            <summary>
            Gets or sets a value indicating whether 
            this <see cref="T:System.Windows.Controls.UpDownParsingEventArgs`1"/> is handled.
            </summary>
            <value><c>True</c> if handled; otherwise, <c>false</c>.</value>
        </member>
    </members>
</doc>
